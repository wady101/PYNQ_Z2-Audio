// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="trace_cntrl_64,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.873000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=785,HLS_SYN_LUT=1074,HLS_VERSION=2018_3}" *)

module trace_cntrl_64 (
        ap_clk,
        ap_rst_n,
        trace_64_TDATA,
        trace_64_TVALID,
        trace_64_TREADY,
        trace_64_TKEEP,
        trace_64_TSTRB,
        trace_64_TUSER,
        trace_64_TLAST,
        trace_64_TID,
        trace_64_TDEST,
        capture_64_TDATA,
        capture_64_TVALID,
        capture_64_TREADY,
        capture_64_TKEEP,
        capture_64_TSTRB,
        capture_64_TUSER,
        capture_64_TLAST,
        capture_64_TID,
        capture_64_TDEST,
        s_axi_trace_cntrl_AWVALID,
        s_axi_trace_cntrl_AWREADY,
        s_axi_trace_cntrl_AWADDR,
        s_axi_trace_cntrl_WVALID,
        s_axi_trace_cntrl_WREADY,
        s_axi_trace_cntrl_WDATA,
        s_axi_trace_cntrl_WSTRB,
        s_axi_trace_cntrl_ARVALID,
        s_axi_trace_cntrl_ARREADY,
        s_axi_trace_cntrl_ARADDR,
        s_axi_trace_cntrl_RVALID,
        s_axi_trace_cntrl_RREADY,
        s_axi_trace_cntrl_RDATA,
        s_axi_trace_cntrl_RRESP,
        s_axi_trace_cntrl_BVALID,
        s_axi_trace_cntrl_BREADY,
        s_axi_trace_cntrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;
parameter    C_S_AXI_TRACE_CNTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_TRACE_CNTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_TRACE_CNTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] trace_64_TDATA;
input   trace_64_TVALID;
output   trace_64_TREADY;
input  [7:0] trace_64_TKEEP;
input  [7:0] trace_64_TSTRB;
input  [0:0] trace_64_TUSER;
input  [0:0] trace_64_TLAST;
input  [0:0] trace_64_TID;
input  [0:0] trace_64_TDEST;
output  [63:0] capture_64_TDATA;
output   capture_64_TVALID;
input   capture_64_TREADY;
output  [7:0] capture_64_TKEEP;
output  [7:0] capture_64_TSTRB;
output  [0:0] capture_64_TUSER;
output  [0:0] capture_64_TLAST;
output  [0:0] capture_64_TID;
output  [0:0] capture_64_TDEST;
input   s_axi_trace_cntrl_AWVALID;
output   s_axi_trace_cntrl_AWREADY;
input  [C_S_AXI_TRACE_CNTRL_ADDR_WIDTH - 1:0] s_axi_trace_cntrl_AWADDR;
input   s_axi_trace_cntrl_WVALID;
output   s_axi_trace_cntrl_WREADY;
input  [C_S_AXI_TRACE_CNTRL_DATA_WIDTH - 1:0] s_axi_trace_cntrl_WDATA;
input  [C_S_AXI_TRACE_CNTRL_WSTRB_WIDTH - 1:0] s_axi_trace_cntrl_WSTRB;
input   s_axi_trace_cntrl_ARVALID;
output   s_axi_trace_cntrl_ARREADY;
input  [C_S_AXI_TRACE_CNTRL_ADDR_WIDTH - 1:0] s_axi_trace_cntrl_ARADDR;
output   s_axi_trace_cntrl_RVALID;
input   s_axi_trace_cntrl_RREADY;
output  [C_S_AXI_TRACE_CNTRL_DATA_WIDTH - 1:0] s_axi_trace_cntrl_RDATA;
output  [1:0] s_axi_trace_cntrl_RRESP;
output   s_axi_trace_cntrl_BVALID;
input   s_axi_trace_cntrl_BREADY;
output  [1:0] s_axi_trace_cntrl_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [63:0] trace_64_data_V_0_data_out;
wire    trace_64_data_V_0_vld_in;
wire    trace_64_data_V_0_vld_out;
wire    trace_64_data_V_0_ack_in;
reg    trace_64_data_V_0_ack_out;
reg   [63:0] trace_64_data_V_0_payload_A;
reg   [63:0] trace_64_data_V_0_payload_B;
reg    trace_64_data_V_0_sel_rd;
reg    trace_64_data_V_0_sel_wr;
wire    trace_64_data_V_0_sel;
wire    trace_64_data_V_0_load_A;
wire    trace_64_data_V_0_load_B;
reg   [1:0] trace_64_data_V_0_state;
wire    trace_64_data_V_0_state_cmp_full;
reg   [7:0] trace_64_keep_V_0_data_out;
wire    trace_64_keep_V_0_vld_in;
wire    trace_64_keep_V_0_vld_out;
wire    trace_64_keep_V_0_ack_in;
reg    trace_64_keep_V_0_ack_out;
reg   [7:0] trace_64_keep_V_0_payload_A;
reg   [7:0] trace_64_keep_V_0_payload_B;
reg    trace_64_keep_V_0_sel_rd;
reg    trace_64_keep_V_0_sel_wr;
wire    trace_64_keep_V_0_sel;
wire    trace_64_keep_V_0_load_A;
wire    trace_64_keep_V_0_load_B;
reg   [1:0] trace_64_keep_V_0_state;
wire    trace_64_keep_V_0_state_cmp_full;
reg   [7:0] trace_64_strb_V_0_data_out;
wire    trace_64_strb_V_0_vld_in;
wire    trace_64_strb_V_0_vld_out;
wire    trace_64_strb_V_0_ack_in;
reg    trace_64_strb_V_0_ack_out;
reg   [7:0] trace_64_strb_V_0_payload_A;
reg   [7:0] trace_64_strb_V_0_payload_B;
reg    trace_64_strb_V_0_sel_rd;
reg    trace_64_strb_V_0_sel_wr;
wire    trace_64_strb_V_0_sel;
wire    trace_64_strb_V_0_load_A;
wire    trace_64_strb_V_0_load_B;
reg   [1:0] trace_64_strb_V_0_state;
wire    trace_64_strb_V_0_state_cmp_full;
reg   [0:0] trace_64_user_V_0_data_out;
wire    trace_64_user_V_0_vld_in;
wire    trace_64_user_V_0_vld_out;
wire    trace_64_user_V_0_ack_in;
reg    trace_64_user_V_0_ack_out;
reg   [0:0] trace_64_user_V_0_payload_A;
reg   [0:0] trace_64_user_V_0_payload_B;
reg    trace_64_user_V_0_sel_rd;
reg    trace_64_user_V_0_sel_wr;
wire    trace_64_user_V_0_sel;
wire    trace_64_user_V_0_load_A;
wire    trace_64_user_V_0_load_B;
reg   [1:0] trace_64_user_V_0_state;
wire    trace_64_user_V_0_state_cmp_full;
reg   [0:0] trace_64_id_V_0_data_out;
wire    trace_64_id_V_0_vld_in;
wire    trace_64_id_V_0_vld_out;
wire    trace_64_id_V_0_ack_in;
reg    trace_64_id_V_0_ack_out;
reg   [0:0] trace_64_id_V_0_payload_A;
reg   [0:0] trace_64_id_V_0_payload_B;
reg    trace_64_id_V_0_sel_rd;
reg    trace_64_id_V_0_sel_wr;
wire    trace_64_id_V_0_sel;
wire    trace_64_id_V_0_load_A;
wire    trace_64_id_V_0_load_B;
reg   [1:0] trace_64_id_V_0_state;
wire    trace_64_id_V_0_state_cmp_full;
reg   [0:0] trace_64_dest_V_0_data_out;
wire    trace_64_dest_V_0_vld_in;
wire    trace_64_dest_V_0_vld_out;
wire    trace_64_dest_V_0_ack_in;
reg    trace_64_dest_V_0_ack_out;
reg   [0:0] trace_64_dest_V_0_payload_A;
reg   [0:0] trace_64_dest_V_0_payload_B;
reg    trace_64_dest_V_0_sel_rd;
reg    trace_64_dest_V_0_sel_wr;
wire    trace_64_dest_V_0_sel;
wire    trace_64_dest_V_0_load_A;
wire    trace_64_dest_V_0_load_B;
reg   [1:0] trace_64_dest_V_0_state;
wire    trace_64_dest_V_0_state_cmp_full;
reg   [63:0] capture_64_data_V_1_data_out;
reg    capture_64_data_V_1_vld_in;
wire    capture_64_data_V_1_vld_out;
wire    capture_64_data_V_1_ack_in;
wire    capture_64_data_V_1_ack_out;
reg   [63:0] capture_64_data_V_1_payload_A;
reg   [63:0] capture_64_data_V_1_payload_B;
reg    capture_64_data_V_1_sel_rd;
reg    capture_64_data_V_1_sel_wr;
wire    capture_64_data_V_1_sel;
wire    capture_64_data_V_1_load_A;
wire    capture_64_data_V_1_load_B;
reg   [1:0] capture_64_data_V_1_state;
wire    capture_64_data_V_1_state_cmp_full;
reg   [7:0] capture_64_keep_V_1_data_out;
reg    capture_64_keep_V_1_vld_in;
wire    capture_64_keep_V_1_vld_out;
wire    capture_64_keep_V_1_ack_in;
wire    capture_64_keep_V_1_ack_out;
reg   [7:0] capture_64_keep_V_1_payload_A;
reg   [7:0] capture_64_keep_V_1_payload_B;
reg    capture_64_keep_V_1_sel_rd;
reg    capture_64_keep_V_1_sel_wr;
wire    capture_64_keep_V_1_sel;
wire    capture_64_keep_V_1_load_A;
wire    capture_64_keep_V_1_load_B;
reg   [1:0] capture_64_keep_V_1_state;
wire    capture_64_keep_V_1_state_cmp_full;
reg   [7:0] capture_64_strb_V_1_data_out;
reg    capture_64_strb_V_1_vld_in;
wire    capture_64_strb_V_1_vld_out;
wire    capture_64_strb_V_1_ack_in;
wire    capture_64_strb_V_1_ack_out;
reg   [7:0] capture_64_strb_V_1_payload_A;
reg   [7:0] capture_64_strb_V_1_payload_B;
reg    capture_64_strb_V_1_sel_rd;
reg    capture_64_strb_V_1_sel_wr;
wire    capture_64_strb_V_1_sel;
wire    capture_64_strb_V_1_load_A;
wire    capture_64_strb_V_1_load_B;
reg   [1:0] capture_64_strb_V_1_state;
wire    capture_64_strb_V_1_state_cmp_full;
reg   [0:0] capture_64_user_V_1_data_out;
reg    capture_64_user_V_1_vld_in;
wire    capture_64_user_V_1_vld_out;
wire    capture_64_user_V_1_ack_in;
wire    capture_64_user_V_1_ack_out;
reg   [0:0] capture_64_user_V_1_payload_A;
reg   [0:0] capture_64_user_V_1_payload_B;
reg    capture_64_user_V_1_sel_rd;
reg    capture_64_user_V_1_sel_wr;
wire    capture_64_user_V_1_sel;
wire    capture_64_user_V_1_load_A;
wire    capture_64_user_V_1_load_B;
reg   [1:0] capture_64_user_V_1_state;
wire    capture_64_user_V_1_state_cmp_full;
reg   [0:0] capture_64_last_V_1_data_out;
reg    capture_64_last_V_1_vld_in;
wire    capture_64_last_V_1_vld_out;
wire    capture_64_last_V_1_ack_in;
wire    capture_64_last_V_1_ack_out;
reg   [0:0] capture_64_last_V_1_payload_A;
reg   [0:0] capture_64_last_V_1_payload_B;
reg    capture_64_last_V_1_sel_rd;
reg    capture_64_last_V_1_sel_wr;
wire    capture_64_last_V_1_sel;
wire    capture_64_last_V_1_load_A;
wire    capture_64_last_V_1_load_B;
reg   [1:0] capture_64_last_V_1_state;
wire    capture_64_last_V_1_state_cmp_full;
reg   [0:0] capture_64_id_V_1_data_out;
reg    capture_64_id_V_1_vld_in;
wire    capture_64_id_V_1_vld_out;
wire    capture_64_id_V_1_ack_in;
wire    capture_64_id_V_1_ack_out;
reg   [0:0] capture_64_id_V_1_payload_A;
reg   [0:0] capture_64_id_V_1_payload_B;
reg    capture_64_id_V_1_sel_rd;
reg    capture_64_id_V_1_sel_wr;
wire    capture_64_id_V_1_sel;
wire    capture_64_id_V_1_load_A;
wire    capture_64_id_V_1_load_B;
reg   [1:0] capture_64_id_V_1_state;
wire    capture_64_id_V_1_state_cmp_full;
reg   [0:0] capture_64_dest_V_1_data_out;
reg    capture_64_dest_V_1_vld_in;
wire    capture_64_dest_V_1_vld_out;
wire    capture_64_dest_V_1_ack_in;
wire    capture_64_dest_V_1_ack_out;
reg   [0:0] capture_64_dest_V_1_payload_A;
reg   [0:0] capture_64_dest_V_1_payload_B;
reg    capture_64_dest_V_1_sel_rd;
reg    capture_64_dest_V_1_sel_wr;
wire    capture_64_dest_V_1_sel;
wire    capture_64_dest_V_1_load_A;
wire    capture_64_dest_V_1_load_B;
reg   [1:0] capture_64_dest_V_1_state;
wire    capture_64_dest_V_1_state_cmp_full;
wire   [63:0] trigger_V;
wire   [31:0] length_r;
reg    trace_64_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] tmp_1_fu_182_p2;
reg    capture_64_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_1_reg_286;
reg   [0:0] tmp_7_reg_320;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_1_reg_286_pp0_iter1_reg;
reg   [0:0] tmp_7_reg_320_pp0_iter1_reg;
reg   [0:0] match_reg_135;
reg   [31:0] i_reg_146;
reg   [31:0] length_read_reg_270;
wire   [31:0] tmp_fu_167_p2;
reg   [31:0] tmp_reg_275;
wire   [31:0] tmp_2_fu_173_p1;
reg   [31:0] tmp_2_reg_280;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op60_write_state3;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_predicate_op63_write_state4;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] trace_temp_data_V_reg_290;
reg   [7:0] trace_temp_keep_V_reg_295;
reg   [7:0] trace_temp_strb_V_reg_300;
reg   [0:0] trace_temp_user_V_reg_305;
reg   [0:0] trace_temp_id_V_reg_310;
reg   [0:0] trace_temp_dest_V_reg_315;
wire   [0:0] tmp_7_fu_225_p2;
wire   [0:0] trace_temp_last_V_fu_241_p2;
reg   [0:0] trace_temp_last_V_reg_325;
wire   [31:0] i_3_fu_257_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [0:0] ap_phi_mux_match_phi_fu_139_p4;
reg   [31:0] ap_phi_mux_i_1_phi_fu_160_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_i_1_reg_157;
wire   [31:0] i_2_fu_231_p2;
reg   [31:0] samples_fu_76;
wire   [31:0] samples_1_fu_246_p2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_3_fu_211_p1;
wire   [31:0] tmp_5_fu_215_p2;
wire   [0:0] tmp_6_fu_220_p2;
wire    ap_CS_fsm_state5;
reg    ap_block_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_852;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 trace_64_data_V_0_sel_rd = 1'b0;
#0 trace_64_data_V_0_sel_wr = 1'b0;
#0 trace_64_data_V_0_state = 2'd0;
#0 trace_64_keep_V_0_sel_rd = 1'b0;
#0 trace_64_keep_V_0_sel_wr = 1'b0;
#0 trace_64_keep_V_0_state = 2'd0;
#0 trace_64_strb_V_0_sel_rd = 1'b0;
#0 trace_64_strb_V_0_sel_wr = 1'b0;
#0 trace_64_strb_V_0_state = 2'd0;
#0 trace_64_user_V_0_sel_rd = 1'b0;
#0 trace_64_user_V_0_sel_wr = 1'b0;
#0 trace_64_user_V_0_state = 2'd0;
#0 trace_64_id_V_0_sel_rd = 1'b0;
#0 trace_64_id_V_0_sel_wr = 1'b0;
#0 trace_64_id_V_0_state = 2'd0;
#0 trace_64_dest_V_0_sel_rd = 1'b0;
#0 trace_64_dest_V_0_sel_wr = 1'b0;
#0 trace_64_dest_V_0_state = 2'd0;
#0 capture_64_data_V_1_sel_rd = 1'b0;
#0 capture_64_data_V_1_sel_wr = 1'b0;
#0 capture_64_data_V_1_state = 2'd0;
#0 capture_64_keep_V_1_sel_rd = 1'b0;
#0 capture_64_keep_V_1_sel_wr = 1'b0;
#0 capture_64_keep_V_1_state = 2'd0;
#0 capture_64_strb_V_1_sel_rd = 1'b0;
#0 capture_64_strb_V_1_sel_wr = 1'b0;
#0 capture_64_strb_V_1_state = 2'd0;
#0 capture_64_user_V_1_sel_rd = 1'b0;
#0 capture_64_user_V_1_sel_wr = 1'b0;
#0 capture_64_user_V_1_state = 2'd0;
#0 capture_64_last_V_1_sel_rd = 1'b0;
#0 capture_64_last_V_1_sel_wr = 1'b0;
#0 capture_64_last_V_1_state = 2'd0;
#0 capture_64_id_V_1_sel_rd = 1'b0;
#0 capture_64_id_V_1_sel_wr = 1'b0;
#0 capture_64_id_V_1_state = 2'd0;
#0 capture_64_dest_V_1_sel_rd = 1'b0;
#0 capture_64_dest_V_1_sel_wr = 1'b0;
#0 capture_64_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

trace_cntrl_64_trace_cntrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_TRACE_CNTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_TRACE_CNTRL_DATA_WIDTH ))
trace_cntrl_64_trace_cntrl_s_axi_U(
    .AWVALID(s_axi_trace_cntrl_AWVALID),
    .AWREADY(s_axi_trace_cntrl_AWREADY),
    .AWADDR(s_axi_trace_cntrl_AWADDR),
    .WVALID(s_axi_trace_cntrl_WVALID),
    .WREADY(s_axi_trace_cntrl_WREADY),
    .WDATA(s_axi_trace_cntrl_WDATA),
    .WSTRB(s_axi_trace_cntrl_WSTRB),
    .ARVALID(s_axi_trace_cntrl_ARVALID),
    .ARREADY(s_axi_trace_cntrl_ARREADY),
    .ARADDR(s_axi_trace_cntrl_ARADDR),
    .RVALID(s_axi_trace_cntrl_RVALID),
    .RREADY(s_axi_trace_cntrl_RREADY),
    .RDATA(s_axi_trace_cntrl_RDATA),
    .RRESP(s_axi_trace_cntrl_RRESP),
    .BVALID(s_axi_trace_cntrl_BVALID),
    .BREADY(s_axi_trace_cntrl_BREADY),
    .BRESP(s_axi_trace_cntrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .trigger_V(trigger_V),
    .length_r(length_r)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((capture_64_data_V_1_ack_out == 1'b1) & (capture_64_data_V_1_vld_out == 1'b1))) begin
            capture_64_data_V_1_sel_rd <= ~capture_64_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((capture_64_data_V_1_ack_in == 1'b1) & (capture_64_data_V_1_vld_in == 1'b1))) begin
            capture_64_data_V_1_sel_wr <= ~capture_64_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_data_V_1_state <= 2'd0;
    end else begin
        if ((((capture_64_data_V_1_state == 2'd2) & (capture_64_data_V_1_vld_in == 1'b0)) | ((capture_64_data_V_1_state == 2'd3) & (capture_64_data_V_1_vld_in == 1'b0) & (capture_64_data_V_1_ack_out == 1'b1)))) begin
            capture_64_data_V_1_state <= 2'd2;
        end else if ((((capture_64_data_V_1_state == 2'd1) & (capture_64_data_V_1_ack_out == 1'b0)) | ((capture_64_data_V_1_state == 2'd3) & (capture_64_data_V_1_ack_out == 1'b0) & (capture_64_data_V_1_vld_in == 1'b1)))) begin
            capture_64_data_V_1_state <= 2'd1;
        end else if (((~((capture_64_data_V_1_vld_in == 1'b0) & (capture_64_data_V_1_ack_out == 1'b1)) & ~((capture_64_data_V_1_ack_out == 1'b0) & (capture_64_data_V_1_vld_in == 1'b1)) & (capture_64_data_V_1_state == 2'd3)) | ((capture_64_data_V_1_state == 2'd1) & (capture_64_data_V_1_ack_out == 1'b1)) | ((capture_64_data_V_1_state == 2'd2) & (capture_64_data_V_1_vld_in == 1'b1)))) begin
            capture_64_data_V_1_state <= 2'd3;
        end else begin
            capture_64_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((capture_64_dest_V_1_ack_out == 1'b1) & (capture_64_dest_V_1_vld_out == 1'b1))) begin
            capture_64_dest_V_1_sel_rd <= ~capture_64_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((capture_64_dest_V_1_ack_in == 1'b1) & (capture_64_dest_V_1_vld_in == 1'b1))) begin
            capture_64_dest_V_1_sel_wr <= ~capture_64_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_dest_V_1_state <= 2'd0;
    end else begin
        if ((((capture_64_dest_V_1_state == 2'd2) & (capture_64_dest_V_1_vld_in == 1'b0)) | ((capture_64_dest_V_1_state == 2'd3) & (capture_64_dest_V_1_vld_in == 1'b0) & (capture_64_dest_V_1_ack_out == 1'b1)))) begin
            capture_64_dest_V_1_state <= 2'd2;
        end else if ((((capture_64_dest_V_1_state == 2'd1) & (capture_64_dest_V_1_ack_out == 1'b0)) | ((capture_64_dest_V_1_state == 2'd3) & (capture_64_dest_V_1_ack_out == 1'b0) & (capture_64_dest_V_1_vld_in == 1'b1)))) begin
            capture_64_dest_V_1_state <= 2'd1;
        end else if (((~((capture_64_dest_V_1_vld_in == 1'b0) & (capture_64_dest_V_1_ack_out == 1'b1)) & ~((capture_64_dest_V_1_ack_out == 1'b0) & (capture_64_dest_V_1_vld_in == 1'b1)) & (capture_64_dest_V_1_state == 2'd3)) | ((capture_64_dest_V_1_state == 2'd1) & (capture_64_dest_V_1_ack_out == 1'b1)) | ((capture_64_dest_V_1_state == 2'd2) & (capture_64_dest_V_1_vld_in == 1'b1)))) begin
            capture_64_dest_V_1_state <= 2'd3;
        end else begin
            capture_64_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((capture_64_id_V_1_ack_out == 1'b1) & (capture_64_id_V_1_vld_out == 1'b1))) begin
            capture_64_id_V_1_sel_rd <= ~capture_64_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((capture_64_id_V_1_ack_in == 1'b1) & (capture_64_id_V_1_vld_in == 1'b1))) begin
            capture_64_id_V_1_sel_wr <= ~capture_64_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_id_V_1_state <= 2'd0;
    end else begin
        if ((((capture_64_id_V_1_state == 2'd2) & (capture_64_id_V_1_vld_in == 1'b0)) | ((capture_64_id_V_1_state == 2'd3) & (capture_64_id_V_1_vld_in == 1'b0) & (capture_64_id_V_1_ack_out == 1'b1)))) begin
            capture_64_id_V_1_state <= 2'd2;
        end else if ((((capture_64_id_V_1_state == 2'd1) & (capture_64_id_V_1_ack_out == 1'b0)) | ((capture_64_id_V_1_state == 2'd3) & (capture_64_id_V_1_ack_out == 1'b0) & (capture_64_id_V_1_vld_in == 1'b1)))) begin
            capture_64_id_V_1_state <= 2'd1;
        end else if (((~((capture_64_id_V_1_vld_in == 1'b0) & (capture_64_id_V_1_ack_out == 1'b1)) & ~((capture_64_id_V_1_ack_out == 1'b0) & (capture_64_id_V_1_vld_in == 1'b1)) & (capture_64_id_V_1_state == 2'd3)) | ((capture_64_id_V_1_state == 2'd1) & (capture_64_id_V_1_ack_out == 1'b1)) | ((capture_64_id_V_1_state == 2'd2) & (capture_64_id_V_1_vld_in == 1'b1)))) begin
            capture_64_id_V_1_state <= 2'd3;
        end else begin
            capture_64_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((capture_64_keep_V_1_ack_out == 1'b1) & (capture_64_keep_V_1_vld_out == 1'b1))) begin
            capture_64_keep_V_1_sel_rd <= ~capture_64_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((capture_64_keep_V_1_ack_in == 1'b1) & (capture_64_keep_V_1_vld_in == 1'b1))) begin
            capture_64_keep_V_1_sel_wr <= ~capture_64_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_keep_V_1_state <= 2'd0;
    end else begin
        if ((((capture_64_keep_V_1_state == 2'd2) & (capture_64_keep_V_1_vld_in == 1'b0)) | ((capture_64_keep_V_1_state == 2'd3) & (capture_64_keep_V_1_vld_in == 1'b0) & (capture_64_keep_V_1_ack_out == 1'b1)))) begin
            capture_64_keep_V_1_state <= 2'd2;
        end else if ((((capture_64_keep_V_1_state == 2'd1) & (capture_64_keep_V_1_ack_out == 1'b0)) | ((capture_64_keep_V_1_state == 2'd3) & (capture_64_keep_V_1_ack_out == 1'b0) & (capture_64_keep_V_1_vld_in == 1'b1)))) begin
            capture_64_keep_V_1_state <= 2'd1;
        end else if (((~((capture_64_keep_V_1_vld_in == 1'b0) & (capture_64_keep_V_1_ack_out == 1'b1)) & ~((capture_64_keep_V_1_ack_out == 1'b0) & (capture_64_keep_V_1_vld_in == 1'b1)) & (capture_64_keep_V_1_state == 2'd3)) | ((capture_64_keep_V_1_state == 2'd1) & (capture_64_keep_V_1_ack_out == 1'b1)) | ((capture_64_keep_V_1_state == 2'd2) & (capture_64_keep_V_1_vld_in == 1'b1)))) begin
            capture_64_keep_V_1_state <= 2'd3;
        end else begin
            capture_64_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((capture_64_last_V_1_ack_out == 1'b1) & (capture_64_last_V_1_vld_out == 1'b1))) begin
            capture_64_last_V_1_sel_rd <= ~capture_64_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((capture_64_last_V_1_ack_in == 1'b1) & (capture_64_last_V_1_vld_in == 1'b1))) begin
            capture_64_last_V_1_sel_wr <= ~capture_64_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_last_V_1_state <= 2'd0;
    end else begin
        if ((((capture_64_last_V_1_state == 2'd2) & (capture_64_last_V_1_vld_in == 1'b0)) | ((capture_64_last_V_1_state == 2'd3) & (capture_64_last_V_1_vld_in == 1'b0) & (capture_64_last_V_1_ack_out == 1'b1)))) begin
            capture_64_last_V_1_state <= 2'd2;
        end else if ((((capture_64_last_V_1_state == 2'd1) & (capture_64_last_V_1_ack_out == 1'b0)) | ((capture_64_last_V_1_state == 2'd3) & (capture_64_last_V_1_ack_out == 1'b0) & (capture_64_last_V_1_vld_in == 1'b1)))) begin
            capture_64_last_V_1_state <= 2'd1;
        end else if (((~((capture_64_last_V_1_vld_in == 1'b0) & (capture_64_last_V_1_ack_out == 1'b1)) & ~((capture_64_last_V_1_ack_out == 1'b0) & (capture_64_last_V_1_vld_in == 1'b1)) & (capture_64_last_V_1_state == 2'd3)) | ((capture_64_last_V_1_state == 2'd1) & (capture_64_last_V_1_ack_out == 1'b1)) | ((capture_64_last_V_1_state == 2'd2) & (capture_64_last_V_1_vld_in == 1'b1)))) begin
            capture_64_last_V_1_state <= 2'd3;
        end else begin
            capture_64_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((capture_64_strb_V_1_ack_out == 1'b1) & (capture_64_strb_V_1_vld_out == 1'b1))) begin
            capture_64_strb_V_1_sel_rd <= ~capture_64_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((capture_64_strb_V_1_ack_in == 1'b1) & (capture_64_strb_V_1_vld_in == 1'b1))) begin
            capture_64_strb_V_1_sel_wr <= ~capture_64_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_strb_V_1_state <= 2'd0;
    end else begin
        if ((((capture_64_strb_V_1_state == 2'd2) & (capture_64_strb_V_1_vld_in == 1'b0)) | ((capture_64_strb_V_1_state == 2'd3) & (capture_64_strb_V_1_vld_in == 1'b0) & (capture_64_strb_V_1_ack_out == 1'b1)))) begin
            capture_64_strb_V_1_state <= 2'd2;
        end else if ((((capture_64_strb_V_1_state == 2'd1) & (capture_64_strb_V_1_ack_out == 1'b0)) | ((capture_64_strb_V_1_state == 2'd3) & (capture_64_strb_V_1_ack_out == 1'b0) & (capture_64_strb_V_1_vld_in == 1'b1)))) begin
            capture_64_strb_V_1_state <= 2'd1;
        end else if (((~((capture_64_strb_V_1_vld_in == 1'b0) & (capture_64_strb_V_1_ack_out == 1'b1)) & ~((capture_64_strb_V_1_ack_out == 1'b0) & (capture_64_strb_V_1_vld_in == 1'b1)) & (capture_64_strb_V_1_state == 2'd3)) | ((capture_64_strb_V_1_state == 2'd1) & (capture_64_strb_V_1_ack_out == 1'b1)) | ((capture_64_strb_V_1_state == 2'd2) & (capture_64_strb_V_1_vld_in == 1'b1)))) begin
            capture_64_strb_V_1_state <= 2'd3;
        end else begin
            capture_64_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((capture_64_user_V_1_ack_out == 1'b1) & (capture_64_user_V_1_vld_out == 1'b1))) begin
            capture_64_user_V_1_sel_rd <= ~capture_64_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((capture_64_user_V_1_ack_in == 1'b1) & (capture_64_user_V_1_vld_in == 1'b1))) begin
            capture_64_user_V_1_sel_wr <= ~capture_64_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        capture_64_user_V_1_state <= 2'd0;
    end else begin
        if ((((capture_64_user_V_1_state == 2'd2) & (capture_64_user_V_1_vld_in == 1'b0)) | ((capture_64_user_V_1_state == 2'd3) & (capture_64_user_V_1_vld_in == 1'b0) & (capture_64_user_V_1_ack_out == 1'b1)))) begin
            capture_64_user_V_1_state <= 2'd2;
        end else if ((((capture_64_user_V_1_state == 2'd1) & (capture_64_user_V_1_ack_out == 1'b0)) | ((capture_64_user_V_1_state == 2'd3) & (capture_64_user_V_1_ack_out == 1'b0) & (capture_64_user_V_1_vld_in == 1'b1)))) begin
            capture_64_user_V_1_state <= 2'd1;
        end else if (((~((capture_64_user_V_1_vld_in == 1'b0) & (capture_64_user_V_1_ack_out == 1'b1)) & ~((capture_64_user_V_1_ack_out == 1'b0) & (capture_64_user_V_1_vld_in == 1'b1)) & (capture_64_user_V_1_state == 2'd3)) | ((capture_64_user_V_1_state == 2'd1) & (capture_64_user_V_1_ack_out == 1'b1)) | ((capture_64_user_V_1_state == 2'd2) & (capture_64_user_V_1_vld_in == 1'b1)))) begin
            capture_64_user_V_1_state <= 2'd3;
        end else begin
            capture_64_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((trace_64_data_V_0_ack_out == 1'b1) & (trace_64_data_V_0_vld_out == 1'b1))) begin
            trace_64_data_V_0_sel_rd <= ~trace_64_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((trace_64_data_V_0_ack_in == 1'b1) & (trace_64_data_V_0_vld_in == 1'b1))) begin
            trace_64_data_V_0_sel_wr <= ~trace_64_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_data_V_0_state <= 2'd0;
    end else begin
        if ((((trace_64_data_V_0_state == 2'd2) & (trace_64_data_V_0_vld_in == 1'b0)) | ((trace_64_data_V_0_state == 2'd3) & (trace_64_data_V_0_vld_in == 1'b0) & (trace_64_data_V_0_ack_out == 1'b1)))) begin
            trace_64_data_V_0_state <= 2'd2;
        end else if ((((trace_64_data_V_0_state == 2'd1) & (trace_64_data_V_0_ack_out == 1'b0)) | ((trace_64_data_V_0_state == 2'd3) & (trace_64_data_V_0_ack_out == 1'b0) & (trace_64_data_V_0_vld_in == 1'b1)))) begin
            trace_64_data_V_0_state <= 2'd1;
        end else if (((~((trace_64_data_V_0_vld_in == 1'b0) & (trace_64_data_V_0_ack_out == 1'b1)) & ~((trace_64_data_V_0_ack_out == 1'b0) & (trace_64_data_V_0_vld_in == 1'b1)) & (trace_64_data_V_0_state == 2'd3)) | ((trace_64_data_V_0_state == 2'd1) & (trace_64_data_V_0_ack_out == 1'b1)) | ((trace_64_data_V_0_state == 2'd2) & (trace_64_data_V_0_vld_in == 1'b1)))) begin
            trace_64_data_V_0_state <= 2'd3;
        end else begin
            trace_64_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((trace_64_dest_V_0_ack_out == 1'b1) & (trace_64_dest_V_0_vld_out == 1'b1))) begin
            trace_64_dest_V_0_sel_rd <= ~trace_64_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((trace_64_dest_V_0_ack_in == 1'b1) & (trace_64_dest_V_0_vld_in == 1'b1))) begin
            trace_64_dest_V_0_sel_wr <= ~trace_64_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_dest_V_0_state <= 2'd0;
    end else begin
        if ((((trace_64_dest_V_0_state == 2'd2) & (trace_64_dest_V_0_vld_in == 1'b0)) | ((trace_64_dest_V_0_state == 2'd3) & (trace_64_dest_V_0_vld_in == 1'b0) & (trace_64_dest_V_0_ack_out == 1'b1)))) begin
            trace_64_dest_V_0_state <= 2'd2;
        end else if ((((trace_64_dest_V_0_state == 2'd1) & (trace_64_dest_V_0_ack_out == 1'b0)) | ((trace_64_dest_V_0_state == 2'd3) & (trace_64_dest_V_0_ack_out == 1'b0) & (trace_64_dest_V_0_vld_in == 1'b1)))) begin
            trace_64_dest_V_0_state <= 2'd1;
        end else if (((~((trace_64_dest_V_0_vld_in == 1'b0) & (trace_64_dest_V_0_ack_out == 1'b1)) & ~((trace_64_dest_V_0_ack_out == 1'b0) & (trace_64_dest_V_0_vld_in == 1'b1)) & (trace_64_dest_V_0_state == 2'd3)) | ((trace_64_dest_V_0_state == 2'd1) & (trace_64_dest_V_0_ack_out == 1'b1)) | ((trace_64_dest_V_0_state == 2'd2) & (trace_64_dest_V_0_vld_in == 1'b1)))) begin
            trace_64_dest_V_0_state <= 2'd3;
        end else begin
            trace_64_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((trace_64_id_V_0_ack_out == 1'b1) & (trace_64_id_V_0_vld_out == 1'b1))) begin
            trace_64_id_V_0_sel_rd <= ~trace_64_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((trace_64_id_V_0_ack_in == 1'b1) & (trace_64_id_V_0_vld_in == 1'b1))) begin
            trace_64_id_V_0_sel_wr <= ~trace_64_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_id_V_0_state <= 2'd0;
    end else begin
        if ((((trace_64_id_V_0_state == 2'd2) & (trace_64_id_V_0_vld_in == 1'b0)) | ((trace_64_id_V_0_state == 2'd3) & (trace_64_id_V_0_vld_in == 1'b0) & (trace_64_id_V_0_ack_out == 1'b1)))) begin
            trace_64_id_V_0_state <= 2'd2;
        end else if ((((trace_64_id_V_0_state == 2'd1) & (trace_64_id_V_0_ack_out == 1'b0)) | ((trace_64_id_V_0_state == 2'd3) & (trace_64_id_V_0_ack_out == 1'b0) & (trace_64_id_V_0_vld_in == 1'b1)))) begin
            trace_64_id_V_0_state <= 2'd1;
        end else if (((~((trace_64_id_V_0_vld_in == 1'b0) & (trace_64_id_V_0_ack_out == 1'b1)) & ~((trace_64_id_V_0_ack_out == 1'b0) & (trace_64_id_V_0_vld_in == 1'b1)) & (trace_64_id_V_0_state == 2'd3)) | ((trace_64_id_V_0_state == 2'd1) & (trace_64_id_V_0_ack_out == 1'b1)) | ((trace_64_id_V_0_state == 2'd2) & (trace_64_id_V_0_vld_in == 1'b1)))) begin
            trace_64_id_V_0_state <= 2'd3;
        end else begin
            trace_64_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((trace_64_keep_V_0_ack_out == 1'b1) & (trace_64_keep_V_0_vld_out == 1'b1))) begin
            trace_64_keep_V_0_sel_rd <= ~trace_64_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((trace_64_keep_V_0_ack_in == 1'b1) & (trace_64_keep_V_0_vld_in == 1'b1))) begin
            trace_64_keep_V_0_sel_wr <= ~trace_64_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_keep_V_0_state <= 2'd0;
    end else begin
        if ((((trace_64_keep_V_0_state == 2'd2) & (trace_64_keep_V_0_vld_in == 1'b0)) | ((trace_64_keep_V_0_state == 2'd3) & (trace_64_keep_V_0_vld_in == 1'b0) & (trace_64_keep_V_0_ack_out == 1'b1)))) begin
            trace_64_keep_V_0_state <= 2'd2;
        end else if ((((trace_64_keep_V_0_state == 2'd1) & (trace_64_keep_V_0_ack_out == 1'b0)) | ((trace_64_keep_V_0_state == 2'd3) & (trace_64_keep_V_0_ack_out == 1'b0) & (trace_64_keep_V_0_vld_in == 1'b1)))) begin
            trace_64_keep_V_0_state <= 2'd1;
        end else if (((~((trace_64_keep_V_0_vld_in == 1'b0) & (trace_64_keep_V_0_ack_out == 1'b1)) & ~((trace_64_keep_V_0_ack_out == 1'b0) & (trace_64_keep_V_0_vld_in == 1'b1)) & (trace_64_keep_V_0_state == 2'd3)) | ((trace_64_keep_V_0_state == 2'd1) & (trace_64_keep_V_0_ack_out == 1'b1)) | ((trace_64_keep_V_0_state == 2'd2) & (trace_64_keep_V_0_vld_in == 1'b1)))) begin
            trace_64_keep_V_0_state <= 2'd3;
        end else begin
            trace_64_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((trace_64_strb_V_0_ack_out == 1'b1) & (trace_64_strb_V_0_vld_out == 1'b1))) begin
            trace_64_strb_V_0_sel_rd <= ~trace_64_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((trace_64_strb_V_0_ack_in == 1'b1) & (trace_64_strb_V_0_vld_in == 1'b1))) begin
            trace_64_strb_V_0_sel_wr <= ~trace_64_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_strb_V_0_state <= 2'd0;
    end else begin
        if ((((trace_64_strb_V_0_state == 2'd2) & (trace_64_strb_V_0_vld_in == 1'b0)) | ((trace_64_strb_V_0_state == 2'd3) & (trace_64_strb_V_0_vld_in == 1'b0) & (trace_64_strb_V_0_ack_out == 1'b1)))) begin
            trace_64_strb_V_0_state <= 2'd2;
        end else if ((((trace_64_strb_V_0_state == 2'd1) & (trace_64_strb_V_0_ack_out == 1'b0)) | ((trace_64_strb_V_0_state == 2'd3) & (trace_64_strb_V_0_ack_out == 1'b0) & (trace_64_strb_V_0_vld_in == 1'b1)))) begin
            trace_64_strb_V_0_state <= 2'd1;
        end else if (((~((trace_64_strb_V_0_vld_in == 1'b0) & (trace_64_strb_V_0_ack_out == 1'b1)) & ~((trace_64_strb_V_0_ack_out == 1'b0) & (trace_64_strb_V_0_vld_in == 1'b1)) & (trace_64_strb_V_0_state == 2'd3)) | ((trace_64_strb_V_0_state == 2'd1) & (trace_64_strb_V_0_ack_out == 1'b1)) | ((trace_64_strb_V_0_state == 2'd2) & (trace_64_strb_V_0_vld_in == 1'b1)))) begin
            trace_64_strb_V_0_state <= 2'd3;
        end else begin
            trace_64_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((trace_64_user_V_0_ack_out == 1'b1) & (trace_64_user_V_0_vld_out == 1'b1))) begin
            trace_64_user_V_0_sel_rd <= ~trace_64_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((trace_64_user_V_0_ack_in == 1'b1) & (trace_64_user_V_0_vld_in == 1'b1))) begin
            trace_64_user_V_0_sel_wr <= ~trace_64_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        trace_64_user_V_0_state <= 2'd0;
    end else begin
        if ((((trace_64_user_V_0_state == 2'd2) & (trace_64_user_V_0_vld_in == 1'b0)) | ((trace_64_user_V_0_state == 2'd3) & (trace_64_user_V_0_vld_in == 1'b0) & (trace_64_user_V_0_ack_out == 1'b1)))) begin
            trace_64_user_V_0_state <= 2'd2;
        end else if ((((trace_64_user_V_0_state == 2'd1) & (trace_64_user_V_0_ack_out == 1'b0)) | ((trace_64_user_V_0_state == 2'd3) & (trace_64_user_V_0_ack_out == 1'b0) & (trace_64_user_V_0_vld_in == 1'b1)))) begin
            trace_64_user_V_0_state <= 2'd1;
        end else if (((~((trace_64_user_V_0_vld_in == 1'b0) & (trace_64_user_V_0_ack_out == 1'b1)) & ~((trace_64_user_V_0_ack_out == 1'b0) & (trace_64_user_V_0_vld_in == 1'b1)) & (trace_64_user_V_0_state == 2'd3)) | ((trace_64_user_V_0_state == 2'd1) & (trace_64_user_V_0_ack_out == 1'b1)) | ((trace_64_user_V_0_state == 2'd2) & (trace_64_user_V_0_vld_in == 1'b1)))) begin
            trace_64_user_V_0_state <= 2'd3;
        end else begin
            trace_64_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_182_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_146 <= i_3_fu_257_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_146 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_reg_286 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        match_reg_135 <= tmp_7_reg_320;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        match_reg_135 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_7_fu_225_p2 == 1'd1) & (tmp_1_fu_182_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        samples_fu_76 <= samples_1_fu_246_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        samples_fu_76 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((capture_64_data_V_1_load_A == 1'b1)) begin
        capture_64_data_V_1_payload_A <= trace_temp_data_V_reg_290;
    end
end

always @ (posedge ap_clk) begin
    if ((capture_64_data_V_1_load_B == 1'b1)) begin
        capture_64_data_V_1_payload_B <= trace_temp_data_V_reg_290;
    end
end

always @ (posedge ap_clk) begin
    if ((capture_64_dest_V_1_load_A == 1'b1)) begin
        capture_64_dest_V_1_payload_A <= trace_temp_dest_V_reg_315;
    end
end

always @ (posedge ap_clk) begin
    if ((capture_64_dest_V_1_load_B == 1'b1)) begin
        capture_64_dest_V_1_payload_B <= trace_temp_dest_V_reg_315;
    end
end

always @ (posedge ap_clk) begin
    if ((capture_64_id_V_1_load_A == 1'b1)) begin
        capture_64_id_V_1_payload_A <= trace_temp_id_V_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if ((capture_64_id_V_1_load_B == 1'b1)) begin
        capture_64_id_V_1_payload_B <= trace_temp_id_V_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if ((capture_64_keep_V_1_load_A == 1'b1)) begin
        capture_64_keep_V_1_payload_A <= trace_temp_keep_V_reg_295;
    end
end

always @ (posedge ap_clk) begin
    if ((capture_64_keep_V_1_load_B == 1'b1)) begin
        capture_64_keep_V_1_payload_B <= trace_temp_keep_V_reg_295;
    end
end

always @ (posedge ap_clk) begin
    if ((capture_64_last_V_1_load_A == 1'b1)) begin
        capture_64_last_V_1_payload_A <= trace_temp_last_V_reg_325;
    end
end

always @ (posedge ap_clk) begin
    if ((capture_64_last_V_1_load_B == 1'b1)) begin
        capture_64_last_V_1_payload_B <= trace_temp_last_V_reg_325;
    end
end

always @ (posedge ap_clk) begin
    if ((capture_64_strb_V_1_load_A == 1'b1)) begin
        capture_64_strb_V_1_payload_A <= trace_temp_strb_V_reg_300;
    end
end

always @ (posedge ap_clk) begin
    if ((capture_64_strb_V_1_load_B == 1'b1)) begin
        capture_64_strb_V_1_payload_B <= trace_temp_strb_V_reg_300;
    end
end

always @ (posedge ap_clk) begin
    if ((capture_64_user_V_1_load_A == 1'b1)) begin
        capture_64_user_V_1_payload_A <= trace_temp_user_V_reg_305;
    end
end

always @ (posedge ap_clk) begin
    if ((capture_64_user_V_1_load_B == 1'b1)) begin
        capture_64_user_V_1_payload_B <= trace_temp_user_V_reg_305;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        length_read_reg_270 <= length_r;
        tmp_2_reg_280 <= tmp_2_fu_173_p1;
        tmp_reg_275 <= tmp_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_286 <= tmp_1_fu_182_p2;
        tmp_1_reg_286_pp0_iter1_reg <= tmp_1_reg_286;
        tmp_7_reg_320_pp0_iter1_reg <= tmp_7_reg_320;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_182_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_7_reg_320 <= tmp_7_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((trace_64_data_V_0_load_A == 1'b1)) begin
        trace_64_data_V_0_payload_A <= trace_64_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((trace_64_data_V_0_load_B == 1'b1)) begin
        trace_64_data_V_0_payload_B <= trace_64_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((trace_64_dest_V_0_load_A == 1'b1)) begin
        trace_64_dest_V_0_payload_A <= trace_64_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((trace_64_dest_V_0_load_B == 1'b1)) begin
        trace_64_dest_V_0_payload_B <= trace_64_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((trace_64_id_V_0_load_A == 1'b1)) begin
        trace_64_id_V_0_payload_A <= trace_64_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((trace_64_id_V_0_load_B == 1'b1)) begin
        trace_64_id_V_0_payload_B <= trace_64_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((trace_64_keep_V_0_load_A == 1'b1)) begin
        trace_64_keep_V_0_payload_A <= trace_64_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((trace_64_keep_V_0_load_B == 1'b1)) begin
        trace_64_keep_V_0_payload_B <= trace_64_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((trace_64_strb_V_0_load_A == 1'b1)) begin
        trace_64_strb_V_0_payload_A <= trace_64_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((trace_64_strb_V_0_load_B == 1'b1)) begin
        trace_64_strb_V_0_payload_B <= trace_64_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((trace_64_user_V_0_load_A == 1'b1)) begin
        trace_64_user_V_0_payload_A <= trace_64_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((trace_64_user_V_0_load_B == 1'b1)) begin
        trace_64_user_V_0_payload_B <= trace_64_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trace_temp_data_V_reg_290 <= trace_64_data_V_0_data_out;
        trace_temp_dest_V_reg_315 <= trace_64_dest_V_0_data_out;
        trace_temp_id_V_reg_310 <= trace_64_id_V_0_data_out;
        trace_temp_keep_V_reg_295 <= trace_64_keep_V_0_data_out;
        trace_temp_strb_V_reg_300 <= trace_64_strb_V_0_data_out;
        trace_temp_user_V_reg_305 <= trace_64_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_7_fu_225_p2 == 1'd1) & (tmp_1_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trace_temp_last_V_reg_325 <= trace_temp_last_V_fu_241_p2;
    end
end

always @ (*) begin
    if ((tmp_1_fu_182_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((capture_64_dest_V_1_ack_in == 1'b0) | (capture_64_id_V_1_ack_in == 1'b0) | (capture_64_last_V_1_ack_in == 1'b0) | (capture_64_user_V_1_ack_in == 1'b0) | (capture_64_strb_V_1_ack_in == 1'b0) | (capture_64_keep_V_1_ack_in == 1'b0) | (capture_64_data_V_1_ack_in == 1'b0)) & (capture_64_dest_V_1_state[1'd0] == 1'b0) & (capture_64_id_V_1_state[1'd0] == 1'b0) & (capture_64_last_V_1_state[1'd0] == 1'b0) & (capture_64_user_V_1_state[1'd0] == 1'b0) & (capture_64_strb_V_1_state[1'd0] == 1'b0) & (capture_64_keep_V_1_state[1'd0] == 1'b0) & (capture_64_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_852)) begin
        if ((tmp_7_fu_225_p2 == 1'd0)) begin
            ap_phi_mux_i_1_phi_fu_160_p4 = i_2_fu_231_p2;
        end else if ((tmp_7_fu_225_p2 == 1'd1)) begin
            ap_phi_mux_i_1_phi_fu_160_p4 = i_reg_146;
        end else begin
            ap_phi_mux_i_1_phi_fu_160_p4 = ap_phi_reg_pp0_iter0_i_1_reg_157;
        end
    end else begin
        ap_phi_mux_i_1_phi_fu_160_p4 = ap_phi_reg_pp0_iter0_i_1_reg_157;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_1_reg_286 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_match_phi_fu_139_p4 = tmp_7_reg_320;
    end else begin
        ap_phi_mux_match_phi_fu_139_p4 = match_reg_135;
    end
end

always @ (*) begin
    if ((~((capture_64_dest_V_1_ack_in == 1'b0) | (capture_64_id_V_1_ack_in == 1'b0) | (capture_64_last_V_1_ack_in == 1'b0) | (capture_64_user_V_1_ack_in == 1'b0) | (capture_64_strb_V_1_ack_in == 1'b0) | (capture_64_keep_V_1_ack_in == 1'b0) | (capture_64_data_V_1_ack_in == 1'b0)) & (capture_64_dest_V_1_state[1'd0] == 1'b0) & (capture_64_id_V_1_state[1'd0] == 1'b0) & (capture_64_last_V_1_state[1'd0] == 1'b0) & (capture_64_user_V_1_state[1'd0] == 1'b0) & (capture_64_strb_V_1_state[1'd0] == 1'b0) & (capture_64_keep_V_1_state[1'd0] == 1'b0) & (capture_64_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_7_reg_320_pp0_iter1_reg == 1'd1) & (tmp_1_reg_286_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_7_reg_320 == 1'd1) & (tmp_1_reg_286 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        capture_64_TDATA_blk_n = capture_64_data_V_1_state[1'd1];
    end else begin
        capture_64_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((capture_64_data_V_1_sel == 1'b1)) begin
        capture_64_data_V_1_data_out = capture_64_data_V_1_payload_B;
    end else begin
        capture_64_data_V_1_data_out = capture_64_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op60_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        capture_64_data_V_1_vld_in = 1'b1;
    end else begin
        capture_64_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((capture_64_dest_V_1_sel == 1'b1)) begin
        capture_64_dest_V_1_data_out = capture_64_dest_V_1_payload_B;
    end else begin
        capture_64_dest_V_1_data_out = capture_64_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op60_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        capture_64_dest_V_1_vld_in = 1'b1;
    end else begin
        capture_64_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((capture_64_id_V_1_sel == 1'b1)) begin
        capture_64_id_V_1_data_out = capture_64_id_V_1_payload_B;
    end else begin
        capture_64_id_V_1_data_out = capture_64_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op60_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        capture_64_id_V_1_vld_in = 1'b1;
    end else begin
        capture_64_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((capture_64_keep_V_1_sel == 1'b1)) begin
        capture_64_keep_V_1_data_out = capture_64_keep_V_1_payload_B;
    end else begin
        capture_64_keep_V_1_data_out = capture_64_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op60_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        capture_64_keep_V_1_vld_in = 1'b1;
    end else begin
        capture_64_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((capture_64_last_V_1_sel == 1'b1)) begin
        capture_64_last_V_1_data_out = capture_64_last_V_1_payload_B;
    end else begin
        capture_64_last_V_1_data_out = capture_64_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op60_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        capture_64_last_V_1_vld_in = 1'b1;
    end else begin
        capture_64_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((capture_64_strb_V_1_sel == 1'b1)) begin
        capture_64_strb_V_1_data_out = capture_64_strb_V_1_payload_B;
    end else begin
        capture_64_strb_V_1_data_out = capture_64_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op60_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        capture_64_strb_V_1_vld_in = 1'b1;
    end else begin
        capture_64_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((capture_64_user_V_1_sel == 1'b1)) begin
        capture_64_user_V_1_data_out = capture_64_user_V_1_payload_B;
    end else begin
        capture_64_user_V_1_data_out = capture_64_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op60_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        capture_64_user_V_1_vld_in = 1'b1;
    end else begin
        capture_64_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_1_fu_182_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trace_64_TDATA_blk_n = trace_64_data_V_0_state[1'd0];
    end else begin
        trace_64_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_182_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trace_64_data_V_0_ack_out = 1'b1;
    end else begin
        trace_64_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((trace_64_data_V_0_sel == 1'b1)) begin
        trace_64_data_V_0_data_out = trace_64_data_V_0_payload_B;
    end else begin
        trace_64_data_V_0_data_out = trace_64_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_182_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trace_64_dest_V_0_ack_out = 1'b1;
    end else begin
        trace_64_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((trace_64_dest_V_0_sel == 1'b1)) begin
        trace_64_dest_V_0_data_out = trace_64_dest_V_0_payload_B;
    end else begin
        trace_64_dest_V_0_data_out = trace_64_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_182_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trace_64_id_V_0_ack_out = 1'b1;
    end else begin
        trace_64_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((trace_64_id_V_0_sel == 1'b1)) begin
        trace_64_id_V_0_data_out = trace_64_id_V_0_payload_B;
    end else begin
        trace_64_id_V_0_data_out = trace_64_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_182_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trace_64_keep_V_0_ack_out = 1'b1;
    end else begin
        trace_64_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((trace_64_keep_V_0_sel == 1'b1)) begin
        trace_64_keep_V_0_data_out = trace_64_keep_V_0_payload_B;
    end else begin
        trace_64_keep_V_0_data_out = trace_64_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_182_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trace_64_strb_V_0_ack_out = 1'b1;
    end else begin
        trace_64_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((trace_64_strb_V_0_sel == 1'b1)) begin
        trace_64_strb_V_0_data_out = trace_64_strb_V_0_payload_B;
    end else begin
        trace_64_strb_V_0_data_out = trace_64_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_1_fu_182_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trace_64_user_V_0_ack_out = 1'b1;
    end else begin
        trace_64_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((trace_64_user_V_0_sel == 1'b1)) begin
        trace_64_user_V_0_data_out = trace_64_user_V_0_payload_B;
    end else begin
        trace_64_user_V_0_data_out = trace_64_user_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_1_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_1_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((capture_64_dest_V_1_ack_in == 1'b0) | (capture_64_id_V_1_ack_in == 1'b0) | (capture_64_last_V_1_ack_in == 1'b0) | (capture_64_user_V_1_ack_in == 1'b0) | (capture_64_strb_V_1_ack_in == 1'b0) | (capture_64_keep_V_1_ack_in == 1'b0) | (capture_64_data_V_1_ack_in == 1'b0)) & (capture_64_dest_V_1_state[1'd0] == 1'b0) & (capture_64_id_V_1_state[1'd0] == 1'b0) & (capture_64_last_V_1_state[1'd0] == 1'b0) & (capture_64_user_V_1_state[1'd0] == 1'b0) & (capture_64_strb_V_1_state[1'd0] == 1'b0) & (capture_64_keep_V_1_state[1'd0] == 1'b0) & (capture_64_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((tmp_1_fu_182_p2 == 1'd1) & (trace_64_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_1_fu_182_p2 == 1'd1) & (trace_64_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((tmp_1_fu_182_p2 == 1'd1) & (trace_64_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((tmp_1_fu_182_p2 == 1'd1) & (trace_64_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((capture_64_data_V_1_ack_in == 1'b0) & (ap_predicate_op60_write_state3 == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((capture_64_data_V_1_ack_in == 1'b0) & (ap_predicate_op63_write_state4 == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5 = ((capture_64_dest_V_1_ack_in == 1'b0) | (capture_64_id_V_1_ack_in == 1'b0) | (capture_64_last_V_1_ack_in == 1'b0) | (capture_64_user_V_1_ack_in == 1'b0) | (capture_64_strb_V_1_ack_in == 1'b0) | (capture_64_keep_V_1_ack_in == 1'b0) | (capture_64_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_condition_852 = ((1'b0 == ap_block_pp0_stage0) & (tmp_1_fu_182_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_i_1_reg_157 = 'bx;

always @ (*) begin
    ap_predicate_op60_write_state3 = ((tmp_7_reg_320 == 1'd1) & (tmp_1_reg_286 == 1'd1));
end

always @ (*) begin
    ap_predicate_op63_write_state4 = ((tmp_7_reg_320_pp0_iter1_reg == 1'd1) & (tmp_1_reg_286_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign capture_64_TDATA = capture_64_data_V_1_data_out;

assign capture_64_TDEST = capture_64_dest_V_1_data_out;

assign capture_64_TID = capture_64_id_V_1_data_out;

assign capture_64_TKEEP = capture_64_keep_V_1_data_out;

assign capture_64_TLAST = capture_64_last_V_1_data_out;

assign capture_64_TSTRB = capture_64_strb_V_1_data_out;

assign capture_64_TUSER = capture_64_user_V_1_data_out;

assign capture_64_TVALID = capture_64_dest_V_1_state[1'd0];

assign capture_64_data_V_1_ack_in = capture_64_data_V_1_state[1'd1];

assign capture_64_data_V_1_ack_out = capture_64_TREADY;

assign capture_64_data_V_1_load_A = (~capture_64_data_V_1_sel_wr & capture_64_data_V_1_state_cmp_full);

assign capture_64_data_V_1_load_B = (capture_64_data_V_1_state_cmp_full & capture_64_data_V_1_sel_wr);

assign capture_64_data_V_1_sel = capture_64_data_V_1_sel_rd;

assign capture_64_data_V_1_state_cmp_full = ((capture_64_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign capture_64_data_V_1_vld_out = capture_64_data_V_1_state[1'd0];

assign capture_64_dest_V_1_ack_in = capture_64_dest_V_1_state[1'd1];

assign capture_64_dest_V_1_ack_out = capture_64_TREADY;

assign capture_64_dest_V_1_load_A = (~capture_64_dest_V_1_sel_wr & capture_64_dest_V_1_state_cmp_full);

assign capture_64_dest_V_1_load_B = (capture_64_dest_V_1_state_cmp_full & capture_64_dest_V_1_sel_wr);

assign capture_64_dest_V_1_sel = capture_64_dest_V_1_sel_rd;

assign capture_64_dest_V_1_state_cmp_full = ((capture_64_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign capture_64_dest_V_1_vld_out = capture_64_dest_V_1_state[1'd0];

assign capture_64_id_V_1_ack_in = capture_64_id_V_1_state[1'd1];

assign capture_64_id_V_1_ack_out = capture_64_TREADY;

assign capture_64_id_V_1_load_A = (~capture_64_id_V_1_sel_wr & capture_64_id_V_1_state_cmp_full);

assign capture_64_id_V_1_load_B = (capture_64_id_V_1_state_cmp_full & capture_64_id_V_1_sel_wr);

assign capture_64_id_V_1_sel = capture_64_id_V_1_sel_rd;

assign capture_64_id_V_1_state_cmp_full = ((capture_64_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign capture_64_id_V_1_vld_out = capture_64_id_V_1_state[1'd0];

assign capture_64_keep_V_1_ack_in = capture_64_keep_V_1_state[1'd1];

assign capture_64_keep_V_1_ack_out = capture_64_TREADY;

assign capture_64_keep_V_1_load_A = (~capture_64_keep_V_1_sel_wr & capture_64_keep_V_1_state_cmp_full);

assign capture_64_keep_V_1_load_B = (capture_64_keep_V_1_state_cmp_full & capture_64_keep_V_1_sel_wr);

assign capture_64_keep_V_1_sel = capture_64_keep_V_1_sel_rd;

assign capture_64_keep_V_1_state_cmp_full = ((capture_64_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign capture_64_keep_V_1_vld_out = capture_64_keep_V_1_state[1'd0];

assign capture_64_last_V_1_ack_in = capture_64_last_V_1_state[1'd1];

assign capture_64_last_V_1_ack_out = capture_64_TREADY;

assign capture_64_last_V_1_load_A = (~capture_64_last_V_1_sel_wr & capture_64_last_V_1_state_cmp_full);

assign capture_64_last_V_1_load_B = (capture_64_last_V_1_state_cmp_full & capture_64_last_V_1_sel_wr);

assign capture_64_last_V_1_sel = capture_64_last_V_1_sel_rd;

assign capture_64_last_V_1_state_cmp_full = ((capture_64_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign capture_64_last_V_1_vld_out = capture_64_last_V_1_state[1'd0];

assign capture_64_strb_V_1_ack_in = capture_64_strb_V_1_state[1'd1];

assign capture_64_strb_V_1_ack_out = capture_64_TREADY;

assign capture_64_strb_V_1_load_A = (~capture_64_strb_V_1_sel_wr & capture_64_strb_V_1_state_cmp_full);

assign capture_64_strb_V_1_load_B = (capture_64_strb_V_1_state_cmp_full & capture_64_strb_V_1_sel_wr);

assign capture_64_strb_V_1_sel = capture_64_strb_V_1_sel_rd;

assign capture_64_strb_V_1_state_cmp_full = ((capture_64_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign capture_64_strb_V_1_vld_out = capture_64_strb_V_1_state[1'd0];

assign capture_64_user_V_1_ack_in = capture_64_user_V_1_state[1'd1];

assign capture_64_user_V_1_ack_out = capture_64_TREADY;

assign capture_64_user_V_1_load_A = (~capture_64_user_V_1_sel_wr & capture_64_user_V_1_state_cmp_full);

assign capture_64_user_V_1_load_B = (capture_64_user_V_1_state_cmp_full & capture_64_user_V_1_sel_wr);

assign capture_64_user_V_1_sel = capture_64_user_V_1_sel_rd;

assign capture_64_user_V_1_state_cmp_full = ((capture_64_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign capture_64_user_V_1_vld_out = capture_64_user_V_1_state[1'd0];

assign i_2_fu_231_p2 = ($signed(i_reg_146) + $signed(32'd4294967295));

assign i_3_fu_257_p2 = (ap_phi_mux_i_1_phi_fu_160_p4 + 32'd1);

assign samples_1_fu_246_p2 = (samples_fu_76 + 32'd1);

assign tmp_1_fu_182_p2 = (($signed(i_reg_146) < $signed(length_read_reg_270)) ? 1'b1 : 1'b0);

assign tmp_2_fu_173_p1 = trigger_V[31:0];

assign tmp_3_fu_211_p1 = trace_64_data_V_0_data_out[31:0];

assign tmp_5_fu_215_p2 = (tmp_3_fu_211_p1 & tmp_2_reg_280);

assign tmp_6_fu_220_p2 = ((tmp_5_fu_215_p2 == tmp_2_reg_280) ? 1'b1 : 1'b0);

assign tmp_7_fu_225_p2 = (tmp_6_fu_220_p2 | ap_phi_mux_match_phi_fu_139_p4);

assign tmp_fu_167_p2 = ($signed(32'd4294967295) + $signed(length_r));

assign trace_64_TREADY = trace_64_dest_V_0_state[1'd1];

assign trace_64_data_V_0_ack_in = trace_64_data_V_0_state[1'd1];

assign trace_64_data_V_0_load_A = (trace_64_data_V_0_state_cmp_full & ~trace_64_data_V_0_sel_wr);

assign trace_64_data_V_0_load_B = (trace_64_data_V_0_state_cmp_full & trace_64_data_V_0_sel_wr);

assign trace_64_data_V_0_sel = trace_64_data_V_0_sel_rd;

assign trace_64_data_V_0_state_cmp_full = ((trace_64_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign trace_64_data_V_0_vld_in = trace_64_TVALID;

assign trace_64_data_V_0_vld_out = trace_64_data_V_0_state[1'd0];

assign trace_64_dest_V_0_ack_in = trace_64_dest_V_0_state[1'd1];

assign trace_64_dest_V_0_load_A = (trace_64_dest_V_0_state_cmp_full & ~trace_64_dest_V_0_sel_wr);

assign trace_64_dest_V_0_load_B = (trace_64_dest_V_0_state_cmp_full & trace_64_dest_V_0_sel_wr);

assign trace_64_dest_V_0_sel = trace_64_dest_V_0_sel_rd;

assign trace_64_dest_V_0_state_cmp_full = ((trace_64_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign trace_64_dest_V_0_vld_in = trace_64_TVALID;

assign trace_64_dest_V_0_vld_out = trace_64_dest_V_0_state[1'd0];

assign trace_64_id_V_0_ack_in = trace_64_id_V_0_state[1'd1];

assign trace_64_id_V_0_load_A = (trace_64_id_V_0_state_cmp_full & ~trace_64_id_V_0_sel_wr);

assign trace_64_id_V_0_load_B = (trace_64_id_V_0_state_cmp_full & trace_64_id_V_0_sel_wr);

assign trace_64_id_V_0_sel = trace_64_id_V_0_sel_rd;

assign trace_64_id_V_0_state_cmp_full = ((trace_64_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign trace_64_id_V_0_vld_in = trace_64_TVALID;

assign trace_64_id_V_0_vld_out = trace_64_id_V_0_state[1'd0];

assign trace_64_keep_V_0_ack_in = trace_64_keep_V_0_state[1'd1];

assign trace_64_keep_V_0_load_A = (trace_64_keep_V_0_state_cmp_full & ~trace_64_keep_V_0_sel_wr);

assign trace_64_keep_V_0_load_B = (trace_64_keep_V_0_state_cmp_full & trace_64_keep_V_0_sel_wr);

assign trace_64_keep_V_0_sel = trace_64_keep_V_0_sel_rd;

assign trace_64_keep_V_0_state_cmp_full = ((trace_64_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign trace_64_keep_V_0_vld_in = trace_64_TVALID;

assign trace_64_keep_V_0_vld_out = trace_64_keep_V_0_state[1'd0];

assign trace_64_strb_V_0_ack_in = trace_64_strb_V_0_state[1'd1];

assign trace_64_strb_V_0_load_A = (trace_64_strb_V_0_state_cmp_full & ~trace_64_strb_V_0_sel_wr);

assign trace_64_strb_V_0_load_B = (trace_64_strb_V_0_state_cmp_full & trace_64_strb_V_0_sel_wr);

assign trace_64_strb_V_0_sel = trace_64_strb_V_0_sel_rd;

assign trace_64_strb_V_0_state_cmp_full = ((trace_64_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign trace_64_strb_V_0_vld_in = trace_64_TVALID;

assign trace_64_strb_V_0_vld_out = trace_64_strb_V_0_state[1'd0];

assign trace_64_user_V_0_ack_in = trace_64_user_V_0_state[1'd1];

assign trace_64_user_V_0_load_A = (trace_64_user_V_0_state_cmp_full & ~trace_64_user_V_0_sel_wr);

assign trace_64_user_V_0_load_B = (trace_64_user_V_0_state_cmp_full & trace_64_user_V_0_sel_wr);

assign trace_64_user_V_0_sel = trace_64_user_V_0_sel_rd;

assign trace_64_user_V_0_state_cmp_full = ((trace_64_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign trace_64_user_V_0_vld_in = trace_64_TVALID;

assign trace_64_user_V_0_vld_out = trace_64_user_V_0_state[1'd0];

assign trace_temp_last_V_fu_241_p2 = ((samples_fu_76 == tmp_reg_275) ? 1'b1 : 1'b0);

endmodule //trace_cntrl_64
