// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pixel_unpack,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.302000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=394,HLS_SYN_LUT=652,HLS_VERSION=2018_3}" *)

module pixel_unpack (
        ap_clk,
        ap_rst_n,
        stream_in_32_TDATA,
        stream_in_32_TVALID,
        stream_in_32_TREADY,
        stream_in_32_TUSER,
        stream_in_32_TLAST,
        stream_out_24_TDATA,
        stream_out_24_TVALID,
        stream_out_24_TREADY,
        stream_out_24_TUSER,
        stream_out_24_TLAST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        control,
        ap_rst_n_control
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_pp0_stage0 = 20'd4;
parameter    ap_ST_fsm_pp0_stage1 = 20'd8;
parameter    ap_ST_fsm_state6 = 20'd16;
parameter    ap_ST_fsm_pp1_stage0 = 20'd32;
parameter    ap_ST_fsm_pp1_stage1 = 20'd64;
parameter    ap_ST_fsm_state10 = 20'd128;
parameter    ap_ST_fsm_pp2_stage0 = 20'd256;
parameter    ap_ST_fsm_pp2_stage1 = 20'd512;
parameter    ap_ST_fsm_pp2_stage2 = 20'd1024;
parameter    ap_ST_fsm_pp2_stage3 = 20'd2048;
parameter    ap_ST_fsm_state16 = 20'd4096;
parameter    ap_ST_fsm_pp3_stage0 = 20'd8192;
parameter    ap_ST_fsm_state19 = 20'd16384;
parameter    ap_ST_fsm_pp4_stage0 = 20'd32768;
parameter    ap_ST_fsm_pp4_stage1 = 20'd65536;
parameter    ap_ST_fsm_pp4_stage2 = 20'd131072;
parameter    ap_ST_fsm_pp4_stage3 = 20'd262144;
parameter    ap_ST_fsm_state27 = 20'd524288;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] stream_in_32_TDATA;
input   stream_in_32_TVALID;
output   stream_in_32_TREADY;
input  [0:0] stream_in_32_TUSER;
input  [0:0] stream_in_32_TLAST;
output  [23:0] stream_out_24_TDATA;
output   stream_out_24_TVALID;
input   stream_out_24_TREADY;
output  [0:0] stream_out_24_TUSER;
output  [0:0] stream_out_24_TLAST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   control;
input   ap_rst_n_control;

 reg    ap_rst_n_inv;
reg   [31:0] stream_in_32_data_V_0_data_out;
wire    stream_in_32_data_V_0_vld_in;
wire    stream_in_32_data_V_0_vld_out;
wire    stream_in_32_data_V_0_ack_in;
reg    stream_in_32_data_V_0_ack_out;
reg   [31:0] stream_in_32_data_V_0_payload_A;
reg   [31:0] stream_in_32_data_V_0_payload_B;
reg    stream_in_32_data_V_0_sel_rd;
reg    stream_in_32_data_V_0_sel_wr;
wire    stream_in_32_data_V_0_sel;
wire    stream_in_32_data_V_0_load_A;
wire    stream_in_32_data_V_0_load_B;
reg   [1:0] stream_in_32_data_V_0_state;
wire    stream_in_32_data_V_0_state_cmp_full;
reg   [0:0] stream_in_32_user_V_0_data_out;
wire    stream_in_32_user_V_0_vld_in;
wire    stream_in_32_user_V_0_vld_out;
wire    stream_in_32_user_V_0_ack_in;
reg    stream_in_32_user_V_0_ack_out;
reg   [0:0] stream_in_32_user_V_0_payload_A;
reg   [0:0] stream_in_32_user_V_0_payload_B;
reg    stream_in_32_user_V_0_sel_rd;
reg    stream_in_32_user_V_0_sel_wr;
wire    stream_in_32_user_V_0_sel;
wire    stream_in_32_user_V_0_load_A;
wire    stream_in_32_user_V_0_load_B;
reg   [1:0] stream_in_32_user_V_0_state;
wire    stream_in_32_user_V_0_state_cmp_full;
reg   [0:0] stream_in_32_last_V_0_data_out;
wire    stream_in_32_last_V_0_vld_in;
wire    stream_in_32_last_V_0_vld_out;
wire    stream_in_32_last_V_0_ack_in;
reg    stream_in_32_last_V_0_ack_out;
reg   [0:0] stream_in_32_last_V_0_payload_A;
reg   [0:0] stream_in_32_last_V_0_payload_B;
reg    stream_in_32_last_V_0_sel_rd;
reg    stream_in_32_last_V_0_sel_wr;
wire    stream_in_32_last_V_0_sel;
wire    stream_in_32_last_V_0_load_A;
wire    stream_in_32_last_V_0_load_B;
reg   [1:0] stream_in_32_last_V_0_state;
wire    stream_in_32_last_V_0_state_cmp_full;
reg   [23:0] stream_out_24_data_V_1_data_in;
reg   [23:0] stream_out_24_data_V_1_data_out;
reg    stream_out_24_data_V_1_vld_in;
wire    stream_out_24_data_V_1_vld_out;
wire    stream_out_24_data_V_1_ack_in;
wire    stream_out_24_data_V_1_ack_out;
reg   [23:0] stream_out_24_data_V_1_payload_A;
reg   [23:0] stream_out_24_data_V_1_payload_B;
reg    stream_out_24_data_V_1_sel_rd;
reg    stream_out_24_data_V_1_sel_wr;
wire    stream_out_24_data_V_1_sel;
wire    stream_out_24_data_V_1_load_A;
wire    stream_out_24_data_V_1_load_B;
reg   [1:0] stream_out_24_data_V_1_state;
wire    stream_out_24_data_V_1_state_cmp_full;
reg   [0:0] stream_out_24_user_V_1_data_in;
reg   [0:0] stream_out_24_user_V_1_data_out;
reg    stream_out_24_user_V_1_vld_in;
wire    stream_out_24_user_V_1_vld_out;
wire    stream_out_24_user_V_1_ack_in;
wire    stream_out_24_user_V_1_ack_out;
reg   [0:0] stream_out_24_user_V_1_payload_A;
reg   [0:0] stream_out_24_user_V_1_payload_B;
reg    stream_out_24_user_V_1_sel_rd;
reg    stream_out_24_user_V_1_sel_wr;
wire    stream_out_24_user_V_1_sel;
wire    stream_out_24_user_V_1_load_A;
wire    stream_out_24_user_V_1_load_B;
reg   [1:0] stream_out_24_user_V_1_state;
wire    stream_out_24_user_V_1_state_cmp_full;
reg   [0:0] stream_out_24_last_V_1_data_in;
reg   [0:0] stream_out_24_last_V_1_data_out;
reg    stream_out_24_last_V_1_vld_in;
wire    stream_out_24_last_V_1_vld_out;
wire    stream_out_24_last_V_1_ack_in;
wire    stream_out_24_last_V_1_ack_out;
reg   [0:0] stream_out_24_last_V_1_payload_A;
reg   [0:0] stream_out_24_last_V_1_payload_B;
reg    stream_out_24_last_V_1_sel_rd;
reg    stream_out_24_last_V_1_sel_wr;
wire    stream_out_24_last_V_1_sel;
wire    stream_out_24_last_V_1_load_A;
wire    stream_out_24_last_V_1_load_B;
reg   [1:0] stream_out_24_last_V_1_state;
wire    stream_out_24_last_V_1_state_cmp_full;
wire   [31:0] mode;
reg   [31:0] mode_0_data_reg;
reg    mode_0_vld_reg;
reg    mode_0_ack_out;
reg    stream_in_32_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_pp4_stage0;
wire    ap_CS_fsm_pp4_stage1;
wire    ap_block_pp4_stage1;
wire    ap_CS_fsm_pp4_stage2;
wire    ap_block_pp4_stage2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage0;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp2_stage0;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    stream_out_24_TDATA_blk_n;
wire    ap_CS_fsm_pp4_stage3;
wire    ap_block_pp4_stage3;
reg    ap_enable_reg_pp4_iter1;
reg    ap_enable_reg_pp3_iter1;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_pp2_stage1;
wire    ap_CS_fsm_pp2_stage2;
wire    ap_block_pp2_stage2;
wire    ap_CS_fsm_pp2_stage3;
wire    ap_block_pp2_stage3;
reg    ap_enable_reg_pp2_iter1;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_pp1_stage1;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
reg    ap_rst_n_control_inv;
reg   [7:0] reg_183;
reg    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_state11_pp2_stage0_iter0;
wire    ap_block_state15_pp2_stage0_iter1;
reg    ap_block_pp2_stage0_11001;
wire   [7:0] grp_fu_153_p4;
reg   [7:0] reg_187;
reg    ap_block_state20_pp4_stage0_iter0;
wire    ap_block_state24_pp4_stage0_iter1;
reg    ap_block_pp4_stage0_11001;
reg   [7:0] reg_191;
reg   [15:0] reg_195;
reg    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
reg    ap_block_state21_pp4_stage1_iter0;
wire    ap_block_state25_pp4_stage1_iter1;
reg    ap_block_pp4_stage1_11001;
wire   [31:0] grp_read_fu_98_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] grp_fu_138_p1;
reg   [0:0] last_2_reg_358;
wire   [23:0] p_Result_2_fu_203_p3;
wire   [23:0] p_Result_14_1_fu_212_p4;
wire    ap_block_state4_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] last_1_reg_378;
wire   [23:0] p_Result_8_fu_227_p1;
wire   [23:0] p_Result_8_1_fu_232_p1;
wire    ap_block_state8_pp1_stage1_iter0;
reg    ap_block_pp1_stage1_11001;
reg   [0:0] last_reg_398;
wire   [23:0] p_Result_6_fu_241_p1;
wire   [23:0] p_Result_6_1_fu_246_p1;
wire    ap_block_state12_pp2_stage1_iter0;
reg    ap_block_pp2_stage1_11001;
wire   [23:0] p_Result_6_2_fu_251_p1;
wire    ap_block_state13_pp2_stage2_iter0;
reg    ap_block_pp2_stage2_11001;
wire   [23:0] p_Result_6_3_fu_256_p1;
wire    ap_block_state14_pp2_stage3_iter0;
reg    ap_block_pp2_stage3_11001;
reg    ap_block_state17_pp3_stage0_iter0;
wire    ap_block_state18_pp3_stage0_iter1;
reg    ap_block_pp3_stage0_11001;
wire   [23:0] tmp_9_fu_261_p1;
reg   [0:0] empty_reg_438_1;
reg   [0:0] empty_reg_438_2;
wire   [23:0] tmp_2_fu_266_p1;
reg   [23:0] tmp_2_reg_444;
reg   [0:0] empty_4_reg_449_1;
reg   [0:0] empty_4_reg_449_2;
wire   [15:0] tmp_4_fu_270_p1;
reg   [15:0] tmp_4_reg_455;
wire   [0:0] has_user_V_2_fu_300_p2;
reg    ap_block_state22_pp4_stage2_iter0;
wire    ap_block_state26_pp4_stage2_iter1;
reg    ap_block_pp4_stage2_11001;
wire   [0:0] last_9_2_fu_313_p2;
reg   [0:0] last_9_2_reg_465;
wire   [7:0] tmp_6_fu_319_p1;
reg   [7:0] tmp_6_reg_470;
reg   [23:0] p_Result_3_3_reg_475;
wire   [23:0] p_Result_3_1_fu_333_p3;
wire    ap_block_state23_pp4_stage3_iter0;
reg    ap_block_pp4_stage3_11001;
wire   [23:0] p_Result_3_2_fu_341_p3;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp1_stage1_subdone;
reg    ap_block_pp1_stage0_subdone;
reg    ap_block_pp2_stage3_subdone;
reg    ap_block_pp2_stage0_subdone;
reg    ap_block_pp3_stage0_subdone;
reg    ap_block_pp4_stage3_subdone;
reg    ap_block_pp4_stage2_subdone;
reg    ap_block_pp0_stage0_01001;
wire    ap_block_pp0_stage1_01001;
reg    ap_block_pp1_stage0_01001;
wire    ap_block_pp1_stage1_01001;
reg    ap_block_pp2_stage0_01001;
wire    ap_block_pp2_stage1_01001;
wire    ap_block_pp2_stage2_01001;
wire    ap_block_pp2_stage3_01001;
reg    ap_block_pp3_stage0_01001;
reg    ap_block_pp4_stage2_01001;
wire    ap_block_pp4_stage3_01001;
reg    ap_block_pp4_stage0_01001;
reg    ap_block_pp4_stage1_01001;
wire   [15:0] tmp_12_fu_199_p1;
wire   [15:0] tmp_11_fu_223_p1;
wire   [7:0] tmp_10_fu_237_p1;
wire   [0:0] tmp4_fu_294_p2;
wire   [0:0] tmp5_fu_307_p2;
wire    ap_CS_fsm_state27;
reg    ap_block_state27;
reg   [19:0] ap_NS_fsm;
reg    ap_block_pp2_stage1_subdone;
reg    ap_block_pp2_stage2_subdone;
reg    ap_block_pp4_stage0_subdone;
reg    ap_block_pp4_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;

// power-on initialization
initial begin
#0 stream_in_32_data_V_0_sel_rd = 1'b0;
#0 stream_in_32_data_V_0_sel_wr = 1'b0;
#0 stream_in_32_data_V_0_state = 2'd0;
#0 stream_in_32_user_V_0_sel_rd = 1'b0;
#0 stream_in_32_user_V_0_sel_wr = 1'b0;
#0 stream_in_32_user_V_0_state = 2'd0;
#0 stream_in_32_last_V_0_sel_rd = 1'b0;
#0 stream_in_32_last_V_0_sel_wr = 1'b0;
#0 stream_in_32_last_V_0_state = 2'd0;
#0 stream_out_24_data_V_1_sel_rd = 1'b0;
#0 stream_out_24_data_V_1_sel_wr = 1'b0;
#0 stream_out_24_data_V_1_state = 2'd0;
#0 stream_out_24_user_V_1_sel_rd = 1'b0;
#0 stream_out_24_user_V_1_sel_wr = 1'b0;
#0 stream_out_24_user_V_1_state = 2'd0;
#0 stream_out_24_last_V_1_sel_rd = 1'b0;
#0 stream_out_24_last_V_1_sel_wr = 1'b0;
#0 stream_out_24_last_V_1_state = 2'd0;
#0 mode_0_data_reg = 32'd0;
#0 mode_0_vld_reg = 1'b0;
#0 ap_CS_fsm = 20'd1;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

pixel_unpack_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
pixel_unpack_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(control),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mode(mode),
    .clk(ap_clk),
    .rst(ap_rst_n_control_inv)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (last_2_reg_358 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((grp_read_fu_98_p2 == 32'd4) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((grp_read_fu_98_p2 == 32'd4) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (last_1_reg_378 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((grp_read_fu_98_p2 == 32'd3) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((grp_read_fu_98_p2 == 32'd3) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage3_subdone) & (last_reg_398 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage3))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((grp_read_fu_98_p2 == 32'd2) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage3_subdone) & (1'b1 == ap_CS_fsm_pp2_stage3)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((grp_read_fu_98_p2 == 32'd2) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (grp_fu_138_p1 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((grp_read_fu_98_p2 == 32'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((grp_read_fu_98_p2 == 32'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage3_subdone) & (last_9_2_reg_465 == 1'd1) & (1'b1 == ap_CS_fsm_pp4_stage3))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((grp_read_fu_98_p2 == 32'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp4_stage3_subdone) & (1'b1 == ap_CS_fsm_pp4_stage3)) | ((1'b0 == ap_block_pp4_stage2_subdone) & (1'b1 == ap_CS_fsm_pp4_stage2)))) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if (((grp_read_fu_98_p2 == 32'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_32_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_32_data_V_0_ack_out == 1'b1) & (stream_in_32_data_V_0_vld_out == 1'b1))) begin
            stream_in_32_data_V_0_sel_rd <= ~stream_in_32_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_32_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_32_data_V_0_ack_in == 1'b1) & (stream_in_32_data_V_0_vld_in == 1'b1))) begin
            stream_in_32_data_V_0_sel_wr <= ~stream_in_32_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_32_data_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_32_data_V_0_state == 2'd2) & (stream_in_32_data_V_0_vld_in == 1'b0)) | ((stream_in_32_data_V_0_state == 2'd3) & (stream_in_32_data_V_0_vld_in == 1'b0) & (stream_in_32_data_V_0_ack_out == 1'b1)))) begin
            stream_in_32_data_V_0_state <= 2'd2;
        end else if ((((stream_in_32_data_V_0_state == 2'd1) & (stream_in_32_data_V_0_ack_out == 1'b0)) | ((stream_in_32_data_V_0_state == 2'd3) & (stream_in_32_data_V_0_ack_out == 1'b0) & (stream_in_32_data_V_0_vld_in == 1'b1)))) begin
            stream_in_32_data_V_0_state <= 2'd1;
        end else if (((~((stream_in_32_data_V_0_vld_in == 1'b0) & (stream_in_32_data_V_0_ack_out == 1'b1)) & ~((stream_in_32_data_V_0_ack_out == 1'b0) & (stream_in_32_data_V_0_vld_in == 1'b1)) & (stream_in_32_data_V_0_state == 2'd3)) | ((stream_in_32_data_V_0_state == 2'd1) & (stream_in_32_data_V_0_ack_out == 1'b1)) | ((stream_in_32_data_V_0_state == 2'd2) & (stream_in_32_data_V_0_vld_in == 1'b1)))) begin
            stream_in_32_data_V_0_state <= 2'd3;
        end else begin
            stream_in_32_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_32_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_32_last_V_0_ack_out == 1'b1) & (stream_in_32_last_V_0_vld_out == 1'b1))) begin
            stream_in_32_last_V_0_sel_rd <= ~stream_in_32_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_32_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_32_last_V_0_ack_in == 1'b1) & (stream_in_32_last_V_0_vld_in == 1'b1))) begin
            stream_in_32_last_V_0_sel_wr <= ~stream_in_32_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_32_last_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_32_last_V_0_state == 2'd2) & (stream_in_32_last_V_0_vld_in == 1'b0)) | ((stream_in_32_last_V_0_state == 2'd3) & (stream_in_32_last_V_0_vld_in == 1'b0) & (stream_in_32_last_V_0_ack_out == 1'b1)))) begin
            stream_in_32_last_V_0_state <= 2'd2;
        end else if ((((stream_in_32_last_V_0_state == 2'd1) & (stream_in_32_last_V_0_ack_out == 1'b0)) | ((stream_in_32_last_V_0_state == 2'd3) & (stream_in_32_last_V_0_ack_out == 1'b0) & (stream_in_32_last_V_0_vld_in == 1'b1)))) begin
            stream_in_32_last_V_0_state <= 2'd1;
        end else if (((~((stream_in_32_last_V_0_vld_in == 1'b0) & (stream_in_32_last_V_0_ack_out == 1'b1)) & ~((stream_in_32_last_V_0_ack_out == 1'b0) & (stream_in_32_last_V_0_vld_in == 1'b1)) & (stream_in_32_last_V_0_state == 2'd3)) | ((stream_in_32_last_V_0_state == 2'd1) & (stream_in_32_last_V_0_ack_out == 1'b1)) | ((stream_in_32_last_V_0_state == 2'd2) & (stream_in_32_last_V_0_vld_in == 1'b1)))) begin
            stream_in_32_last_V_0_state <= 2'd3;
        end else begin
            stream_in_32_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_32_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_32_user_V_0_ack_out == 1'b1) & (stream_in_32_user_V_0_vld_out == 1'b1))) begin
            stream_in_32_user_V_0_sel_rd <= ~stream_in_32_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_32_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_32_user_V_0_ack_in == 1'b1) & (stream_in_32_user_V_0_vld_in == 1'b1))) begin
            stream_in_32_user_V_0_sel_wr <= ~stream_in_32_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_32_user_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_32_user_V_0_state == 2'd2) & (stream_in_32_user_V_0_vld_in == 1'b0)) | ((stream_in_32_user_V_0_state == 2'd3) & (stream_in_32_user_V_0_vld_in == 1'b0) & (stream_in_32_user_V_0_ack_out == 1'b1)))) begin
            stream_in_32_user_V_0_state <= 2'd2;
        end else if ((((stream_in_32_user_V_0_state == 2'd1) & (stream_in_32_user_V_0_ack_out == 1'b0)) | ((stream_in_32_user_V_0_state == 2'd3) & (stream_in_32_user_V_0_ack_out == 1'b0) & (stream_in_32_user_V_0_vld_in == 1'b1)))) begin
            stream_in_32_user_V_0_state <= 2'd1;
        end else if (((~((stream_in_32_user_V_0_vld_in == 1'b0) & (stream_in_32_user_V_0_ack_out == 1'b1)) & ~((stream_in_32_user_V_0_ack_out == 1'b0) & (stream_in_32_user_V_0_vld_in == 1'b1)) & (stream_in_32_user_V_0_state == 2'd3)) | ((stream_in_32_user_V_0_state == 2'd1) & (stream_in_32_user_V_0_ack_out == 1'b1)) | ((stream_in_32_user_V_0_state == 2'd2) & (stream_in_32_user_V_0_vld_in == 1'b1)))) begin
            stream_in_32_user_V_0_state <= 2'd3;
        end else begin
            stream_in_32_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_24_data_V_1_ack_out == 1'b1) & (stream_out_24_data_V_1_vld_out == 1'b1))) begin
            stream_out_24_data_V_1_sel_rd <= ~stream_out_24_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_24_data_V_1_ack_in == 1'b1) & (stream_out_24_data_V_1_vld_in == 1'b1))) begin
            stream_out_24_data_V_1_sel_wr <= ~stream_out_24_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_data_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_24_data_V_1_state == 2'd2) & (stream_out_24_data_V_1_vld_in == 1'b0)) | ((stream_out_24_data_V_1_state == 2'd3) & (stream_out_24_data_V_1_vld_in == 1'b0) & (stream_out_24_data_V_1_ack_out == 1'b1)))) begin
            stream_out_24_data_V_1_state <= 2'd2;
        end else if ((((stream_out_24_data_V_1_state == 2'd1) & (stream_out_24_data_V_1_ack_out == 1'b0)) | ((stream_out_24_data_V_1_state == 2'd3) & (stream_out_24_data_V_1_ack_out == 1'b0) & (stream_out_24_data_V_1_vld_in == 1'b1)))) begin
            stream_out_24_data_V_1_state <= 2'd1;
        end else if (((~((stream_out_24_data_V_1_vld_in == 1'b0) & (stream_out_24_data_V_1_ack_out == 1'b1)) & ~((stream_out_24_data_V_1_ack_out == 1'b0) & (stream_out_24_data_V_1_vld_in == 1'b1)) & (stream_out_24_data_V_1_state == 2'd3)) | ((stream_out_24_data_V_1_state == 2'd1) & (stream_out_24_data_V_1_ack_out == 1'b1)) | ((stream_out_24_data_V_1_state == 2'd2) & (stream_out_24_data_V_1_vld_in == 1'b1)))) begin
            stream_out_24_data_V_1_state <= 2'd3;
        end else begin
            stream_out_24_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_24_last_V_1_ack_out == 1'b1) & (stream_out_24_last_V_1_vld_out == 1'b1))) begin
            stream_out_24_last_V_1_sel_rd <= ~stream_out_24_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_24_last_V_1_ack_in == 1'b1) & (stream_out_24_last_V_1_vld_in == 1'b1))) begin
            stream_out_24_last_V_1_sel_wr <= ~stream_out_24_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_last_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_24_last_V_1_state == 2'd2) & (stream_out_24_last_V_1_vld_in == 1'b0)) | ((stream_out_24_last_V_1_state == 2'd3) & (stream_out_24_last_V_1_vld_in == 1'b0) & (stream_out_24_last_V_1_ack_out == 1'b1)))) begin
            stream_out_24_last_V_1_state <= 2'd2;
        end else if ((((stream_out_24_last_V_1_state == 2'd1) & (stream_out_24_last_V_1_ack_out == 1'b0)) | ((stream_out_24_last_V_1_state == 2'd3) & (stream_out_24_last_V_1_ack_out == 1'b0) & (stream_out_24_last_V_1_vld_in == 1'b1)))) begin
            stream_out_24_last_V_1_state <= 2'd1;
        end else if (((~((stream_out_24_last_V_1_vld_in == 1'b0) & (stream_out_24_last_V_1_ack_out == 1'b1)) & ~((stream_out_24_last_V_1_ack_out == 1'b0) & (stream_out_24_last_V_1_vld_in == 1'b1)) & (stream_out_24_last_V_1_state == 2'd3)) | ((stream_out_24_last_V_1_state == 2'd1) & (stream_out_24_last_V_1_ack_out == 1'b1)) | ((stream_out_24_last_V_1_state == 2'd2) & (stream_out_24_last_V_1_vld_in == 1'b1)))) begin
            stream_out_24_last_V_1_state <= 2'd3;
        end else begin
            stream_out_24_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_24_user_V_1_ack_out == 1'b1) & (stream_out_24_user_V_1_vld_out == 1'b1))) begin
            stream_out_24_user_V_1_sel_rd <= ~stream_out_24_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_24_user_V_1_ack_in == 1'b1) & (stream_out_24_user_V_1_vld_in == 1'b1))) begin
            stream_out_24_user_V_1_sel_wr <= ~stream_out_24_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_user_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_24_user_V_1_state == 2'd2) & (stream_out_24_user_V_1_vld_in == 1'b0)) | ((stream_out_24_user_V_1_state == 2'd3) & (stream_out_24_user_V_1_vld_in == 1'b0) & (stream_out_24_user_V_1_ack_out == 1'b1)))) begin
            stream_out_24_user_V_1_state <= 2'd2;
        end else if ((((stream_out_24_user_V_1_state == 2'd1) & (stream_out_24_user_V_1_ack_out == 1'b0)) | ((stream_out_24_user_V_1_state == 2'd3) & (stream_out_24_user_V_1_ack_out == 1'b0) & (stream_out_24_user_V_1_vld_in == 1'b1)))) begin
            stream_out_24_user_V_1_state <= 2'd1;
        end else if (((~((stream_out_24_user_V_1_vld_in == 1'b0) & (stream_out_24_user_V_1_ack_out == 1'b1)) & ~((stream_out_24_user_V_1_ack_out == 1'b0) & (stream_out_24_user_V_1_vld_in == 1'b1)) & (stream_out_24_user_V_1_state == 2'd3)) | ((stream_out_24_user_V_1_state == 2'd1) & (stream_out_24_user_V_1_ack_out == 1'b1)) | ((stream_out_24_user_V_1_state == 2'd2) & (stream_out_24_user_V_1_vld_in == 1'b1)))) begin
            stream_out_24_user_V_1_state <= 2'd3;
        end else begin
            stream_out_24_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        empty_4_reg_449_1 <= stream_in_32_user_V_0_data_out;
        empty_4_reg_449_2 <= stream_in_32_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        empty_reg_438_1 <= stream_in_32_user_V_0_data_out;
        empty_reg_438_2 <= stream_in_32_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        last_1_reg_378 <= stream_in_32_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        last_2_reg_358 <= stream_in_32_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2))) begin
        last_9_2_reg_465 <= last_9_2_fu_313_p2;
        p_Result_3_3_reg_475 <= {{stream_in_32_data_V_0_data_out[31:8]}};
        tmp_6_reg_470 <= tmp_6_fu_319_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        last_reg_398 <= stream_in_32_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((((mode_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((mode_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (mode_0_vld_reg == 1'b1)))) begin
        mode_0_data_reg <= mode;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        reg_183 <= {{stream_in_32_data_V_0_data_out[15:8]}};
        reg_191 <= {{stream_in_32_data_V_0_data_out[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        reg_187 <= {{stream_in_32_data_V_0_data_out[31:24]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
        reg_195 <= {{stream_in_32_data_V_0_data_out[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_32_data_V_0_load_A == 1'b1)) begin
        stream_in_32_data_V_0_payload_A <= stream_in_32_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_32_data_V_0_load_B == 1'b1)) begin
        stream_in_32_data_V_0_payload_B <= stream_in_32_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_32_last_V_0_load_A == 1'b1)) begin
        stream_in_32_last_V_0_payload_A <= stream_in_32_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_32_last_V_0_load_B == 1'b1)) begin
        stream_in_32_last_V_0_payload_B <= stream_in_32_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_32_user_V_0_load_A == 1'b1)) begin
        stream_in_32_user_V_0_payload_A <= stream_in_32_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_32_user_V_0_load_B == 1'b1)) begin
        stream_in_32_user_V_0_payload_B <= stream_in_32_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_data_V_1_load_A == 1'b1)) begin
        stream_out_24_data_V_1_payload_A <= stream_out_24_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_data_V_1_load_B == 1'b1)) begin
        stream_out_24_data_V_1_payload_B <= stream_out_24_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_last_V_1_load_A == 1'b1)) begin
        stream_out_24_last_V_1_payload_A <= stream_out_24_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_last_V_1_load_B == 1'b1)) begin
        stream_out_24_last_V_1_payload_B <= stream_out_24_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_user_V_1_load_A == 1'b1)) begin
        stream_out_24_user_V_1_payload_A <= stream_out_24_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_user_V_1_load_B == 1'b1)) begin
        stream_out_24_user_V_1_payload_B <= stream_out_24_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        tmp_2_reg_444 <= tmp_2_fu_266_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        tmp_4_reg_455 <= tmp_4_fu_270_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_24_last_V_1_ack_in == 1'b0) | (stream_out_24_user_V_1_ack_in == 1'b0) | (stream_out_24_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state27))) begin
        mode_0_ack_out = 1'b1;
    end else begin
        mode_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp4_stage2) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        stream_in_32_TDATA_blk_n = stream_in_32_data_V_0_state[1'd0];
    end else begin
        stream_in_32_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        stream_in_32_data_V_0_ack_out = 1'b1;
    end else begin
        stream_in_32_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_32_data_V_0_sel == 1'b1)) begin
        stream_in_32_data_V_0_data_out = stream_in_32_data_V_0_payload_B;
    end else begin
        stream_in_32_data_V_0_data_out = stream_in_32_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        stream_in_32_last_V_0_ack_out = 1'b1;
    end else begin
        stream_in_32_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_32_last_V_0_sel == 1'b1)) begin
        stream_in_32_last_V_0_data_out = stream_in_32_last_V_0_payload_B;
    end else begin
        stream_in_32_last_V_0_data_out = stream_in_32_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage1_11001) & (1'b1 == ap_CS_fsm_pp4_stage1) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        stream_in_32_user_V_0_ack_out = 1'b1;
    end else begin
        stream_in_32_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_32_user_V_0_sel == 1'b1)) begin
        stream_in_32_user_V_0_data_out = stream_in_32_user_V_0_payload_B;
    end else begin
        stream_in_32_user_V_0_data_out = stream_in_32_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage3) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage2) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp4_stage2) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage2)) | ((1'b0 == ap_block_pp4_stage1) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp4_stage3) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage2) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        stream_out_24_TDATA_blk_n = stream_out_24_data_V_1_state[1'd1];
    end else begin
        stream_out_24_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage1_01001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        stream_out_24_data_V_1_data_in = p_Result_3_3_reg_475;
    end else if (((1'b0 == ap_block_pp4_stage0_01001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        stream_out_24_data_V_1_data_in = p_Result_3_2_fu_341_p3;
    end else if (((1'b0 == ap_block_pp4_stage3_01001) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        stream_out_24_data_V_1_data_in = p_Result_3_1_fu_333_p3;
    end else if (((1'b0 == ap_block_pp4_stage2_01001) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        stream_out_24_data_V_1_data_in = tmp_2_reg_444;
    end else if (((1'b0 == ap_block_pp3_stage0_01001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        stream_out_24_data_V_1_data_in = tmp_9_fu_261_p1;
    end else if (((1'b0 == ap_block_pp2_stage3_01001) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        stream_out_24_data_V_1_data_in = p_Result_6_3_fu_256_p1;
    end else if (((1'b0 == ap_block_pp2_stage2_01001) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        stream_out_24_data_V_1_data_in = p_Result_6_2_fu_251_p1;
    end else if (((1'b0 == ap_block_pp2_stage1_01001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        stream_out_24_data_V_1_data_in = p_Result_6_1_fu_246_p1;
    end else if (((1'b0 == ap_block_pp2_stage0_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        stream_out_24_data_V_1_data_in = p_Result_6_fu_241_p1;
    end else if (((1'b0 == ap_block_pp1_stage1_01001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        stream_out_24_data_V_1_data_in = p_Result_8_1_fu_232_p1;
    end else if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        stream_out_24_data_V_1_data_in = p_Result_8_fu_227_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        stream_out_24_data_V_1_data_in = p_Result_14_1_fu_212_p4;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_24_data_V_1_data_in = p_Result_2_fu_203_p3;
    end else begin
        stream_out_24_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_24_data_V_1_sel == 1'b1)) begin
        stream_out_24_data_V_1_data_out = stream_out_24_data_V_1_payload_B;
    end else begin
        stream_out_24_data_V_1_data_out = stream_out_24_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp4_stage1_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp4_stage3_11001) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        stream_out_24_data_V_1_vld_in = 1'b1;
    end else begin
        stream_out_24_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage1_01001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1))) begin
        stream_out_24_last_V_1_data_in = last_9_2_reg_465;
    end else if (((1'b0 == ap_block_pp3_stage0_01001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        stream_out_24_last_V_1_data_in = stream_in_32_last_V_0_data_out;
    end else if (((1'b0 == ap_block_pp2_stage3_01001) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        stream_out_24_last_V_1_data_in = last_reg_398;
    end else if (((1'b0 == ap_block_pp1_stage1_01001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        stream_out_24_last_V_1_data_in = last_1_reg_378;
    end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        stream_out_24_last_V_1_data_in = last_2_reg_358;
    end else if ((((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage2_01001) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1_01001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp4_stage3_01001) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage2_01001) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_01001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        stream_out_24_last_V_1_data_in = 1'd0;
    end else begin
        stream_out_24_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_24_last_V_1_sel == 1'b1)) begin
        stream_out_24_last_V_1_data_out = stream_out_24_last_V_1_payload_B;
    end else begin
        stream_out_24_last_V_1_data_out = stream_out_24_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp4_stage1_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp4_stage3_11001) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        stream_out_24_last_V_1_vld_in = 1'b1;
    end else begin
        stream_out_24_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage2_01001) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        stream_out_24_user_V_1_data_in = has_user_V_2_fu_300_p2;
    end else if ((((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_01001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage3_01001) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage2_01001) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1_01001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage1_01001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp4_stage3_01001) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_01001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        stream_out_24_user_V_1_data_in = 1'd0;
    end else if ((((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage0_01001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_01001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        stream_out_24_user_V_1_data_in = stream_in_32_user_V_0_data_out;
    end else begin
        stream_out_24_user_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_24_user_V_1_sel == 1'b1)) begin
        stream_out_24_user_V_1_data_out = stream_out_24_user_V_1_payload_B;
    end else begin
        stream_out_24_user_V_1_data_out = stream_out_24_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage3_11001) & (1'b1 == ap_CS_fsm_pp2_stage3) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage2_11001) & (1'b1 == ap_CS_fsm_pp2_stage2) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp4_stage1_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1)) | ((1'b0 == ap_block_pp4_stage3_11001) & (1'b1 == ap_CS_fsm_pp4_stage3) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage2_11001) & (1'b1 == ap_CS_fsm_pp4_stage2) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        stream_out_24_user_V_1_vld_in = 1'b1;
    end else begin
        stream_out_24_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((grp_read_fu_98_p2 == 32'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((grp_read_fu_98_p2 == 32'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((grp_read_fu_98_p2 == 32'd2) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((grp_read_fu_98_p2 == 32'd3) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((grp_read_fu_98_p2 == 32'd4) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((1'b0 == ap_block_pp2_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_pp2_stage3 : begin
            if ((1'b0 == ap_block_pp2_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_pp4_stage1 : begin
            if ((1'b0 == ap_block_pp4_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end
        end
        ap_ST_fsm_pp4_stage2 : begin
            if ((~((1'b0 == ap_block_pp4_stage2_subdone) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage2)) & (1'b0 == ap_block_pp4_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage3;
            end else if (((1'b0 == ap_block_pp4_stage2_subdone) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage2;
            end
        end
        ap_ST_fsm_pp4_stage3 : begin
            if ((1'b0 == ap_block_pp4_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage3;
            end
        end
        ap_ST_fsm_state27 : begin
            if ((~((stream_out_24_last_V_1_ack_in == 1'b0) | (stream_out_24_user_V_1_ack_in == 1'b0) | (stream_out_24_data_V_1_ack_in == 1'b0)) & (stream_out_24_last_V_1_state[1'd0] == 1'b0) & (stream_out_24_user_V_1_state[1'd0] == 1'b0) & (stream_out_24_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp2_stage3 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp4_stage1 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp4_stage2 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp4_stage3 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd19];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((stream_in_32_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((stream_in_32_data_V_0_vld_out == 1'b0) | (stream_out_24_data_V_1_ack_in == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((stream_in_32_data_V_0_vld_out == 1'b0) | (stream_out_24_data_V_1_ack_in == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((stream_in_32_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & ((stream_in_32_data_V_0_vld_out == 1'b0) | (stream_out_24_data_V_1_ack_in == 1'b0))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & ((stream_in_32_data_V_0_vld_out == 1'b0) | (stream_out_24_data_V_1_ack_in == 1'b0))));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = ((stream_in_32_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & ((stream_in_32_data_V_0_vld_out == 1'b0) | (stream_out_24_data_V_1_ack_in == 1'b0))));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & ((stream_in_32_data_V_0_vld_out == 1'b0) | (stream_out_24_data_V_1_ack_in == 1'b0))));
end

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage1_11001 = ((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage1_subdone = ((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage2_11001 = ((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage2_subdone = ((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

assign ap_block_pp2_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage3_11001 = ((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage3_subdone = ((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = ((stream_in_32_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = (((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & ((stream_in_32_data_V_0_vld_out == 1'b0) | (stream_out_24_data_V_1_ack_in == 1'b0))));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = (((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & ((stream_in_32_data_V_0_vld_out == 1'b0) | (stream_out_24_data_V_1_ack_in == 1'b0))));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_01001 = ((stream_in_32_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_11001 = (((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((stream_in_32_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = (((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((stream_in_32_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1)));
end

assign ap_block_pp4_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage1_01001 = ((stream_in_32_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage1_11001 = (((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((stream_in_32_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp4_stage1_subdone = (((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((stream_in_32_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1)));
end

assign ap_block_pp4_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage2_01001 = ((stream_in_32_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage2_11001 = (((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & ((stream_in_32_data_V_0_vld_out == 1'b0) | (stream_out_24_data_V_1_ack_in == 1'b0))));
end

always @ (*) begin
    ap_block_pp4_stage2_subdone = (((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & ((stream_in_32_data_V_0_vld_out == 1'b0) | (stream_out_24_data_V_1_ack_in == 1'b0))));
end

assign ap_block_pp4_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage3_11001 = ((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage3_subdone = ((stream_out_24_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state11_pp2_stage0_iter0 = (stream_in_32_data_V_0_vld_out == 1'b0);
end

assign ap_block_state12_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp3_stage0_iter0 = (stream_in_32_data_V_0_vld_out == 1'b0);
end

assign ap_block_state18_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp4_stage0_iter0 = (stream_in_32_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state21_pp4_stage1_iter0 = (stream_in_32_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state22_pp4_stage2_iter0 = (stream_in_32_data_V_0_vld_out == 1'b0);
end

assign ap_block_state23_pp4_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp4_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp4_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27 = ((stream_out_24_last_V_1_ack_in == 1'b0) | (stream_out_24_user_V_1_ack_in == 1'b0) | (stream_out_24_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = (stream_in_32_data_V_0_vld_out == 1'b0);
end

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp1_stage0_iter0 = (stream_in_32_data_V_0_vld_out == 1'b0);
end

assign ap_block_state8_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_control_inv = ~ap_rst_n_control;
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_138_p1 = stream_in_32_last_V_0_data_out;

assign grp_fu_153_p4 = {{stream_in_32_data_V_0_data_out[31:24]}};

assign grp_read_fu_98_p2 = mode_0_data_reg;

assign has_user_V_2_fu_300_p2 = (tmp4_fu_294_p2 | empty_reg_438_1);

assign last_9_2_fu_313_p2 = (tmp5_fu_307_p2 | empty_reg_438_2);

assign p_Result_14_1_fu_212_p4 = {{{reg_187}, {reg_183}}, {reg_191}};

assign p_Result_2_fu_203_p3 = {{grp_fu_153_p4}, {tmp_12_fu_199_p1}};

assign p_Result_3_1_fu_333_p3 = {{tmp_4_reg_455}, {reg_187}};

assign p_Result_3_2_fu_341_p3 = {{tmp_6_reg_470}, {reg_195}};

assign p_Result_6_1_fu_246_p1 = reg_183;

assign p_Result_6_2_fu_251_p1 = reg_191;

assign p_Result_6_3_fu_256_p1 = reg_187;

assign p_Result_6_fu_241_p1 = tmp_10_fu_237_p1;

assign p_Result_8_1_fu_232_p1 = reg_195;

assign p_Result_8_fu_227_p1 = tmp_11_fu_223_p1;

assign stream_in_32_TREADY = stream_in_32_last_V_0_state[1'd1];

assign stream_in_32_data_V_0_ack_in = stream_in_32_data_V_0_state[1'd1];

assign stream_in_32_data_V_0_load_A = (stream_in_32_data_V_0_state_cmp_full & ~stream_in_32_data_V_0_sel_wr);

assign stream_in_32_data_V_0_load_B = (stream_in_32_data_V_0_state_cmp_full & stream_in_32_data_V_0_sel_wr);

assign stream_in_32_data_V_0_sel = stream_in_32_data_V_0_sel_rd;

assign stream_in_32_data_V_0_state_cmp_full = ((stream_in_32_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_32_data_V_0_vld_in = stream_in_32_TVALID;

assign stream_in_32_data_V_0_vld_out = stream_in_32_data_V_0_state[1'd0];

assign stream_in_32_last_V_0_ack_in = stream_in_32_last_V_0_state[1'd1];

assign stream_in_32_last_V_0_load_A = (stream_in_32_last_V_0_state_cmp_full & ~stream_in_32_last_V_0_sel_wr);

assign stream_in_32_last_V_0_load_B = (stream_in_32_last_V_0_state_cmp_full & stream_in_32_last_V_0_sel_wr);

assign stream_in_32_last_V_0_sel = stream_in_32_last_V_0_sel_rd;

assign stream_in_32_last_V_0_state_cmp_full = ((stream_in_32_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_32_last_V_0_vld_in = stream_in_32_TVALID;

assign stream_in_32_last_V_0_vld_out = stream_in_32_last_V_0_state[1'd0];

assign stream_in_32_user_V_0_ack_in = stream_in_32_user_V_0_state[1'd1];

assign stream_in_32_user_V_0_load_A = (stream_in_32_user_V_0_state_cmp_full & ~stream_in_32_user_V_0_sel_wr);

assign stream_in_32_user_V_0_load_B = (stream_in_32_user_V_0_state_cmp_full & stream_in_32_user_V_0_sel_wr);

assign stream_in_32_user_V_0_sel = stream_in_32_user_V_0_sel_rd;

assign stream_in_32_user_V_0_state_cmp_full = ((stream_in_32_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_32_user_V_0_vld_in = stream_in_32_TVALID;

assign stream_in_32_user_V_0_vld_out = stream_in_32_user_V_0_state[1'd0];

assign stream_out_24_TDATA = stream_out_24_data_V_1_data_out;

assign stream_out_24_TLAST = stream_out_24_last_V_1_data_out;

assign stream_out_24_TUSER = stream_out_24_user_V_1_data_out;

assign stream_out_24_TVALID = stream_out_24_last_V_1_state[1'd0];

assign stream_out_24_data_V_1_ack_in = stream_out_24_data_V_1_state[1'd1];

assign stream_out_24_data_V_1_ack_out = stream_out_24_TREADY;

assign stream_out_24_data_V_1_load_A = (stream_out_24_data_V_1_state_cmp_full & ~stream_out_24_data_V_1_sel_wr);

assign stream_out_24_data_V_1_load_B = (stream_out_24_data_V_1_state_cmp_full & stream_out_24_data_V_1_sel_wr);

assign stream_out_24_data_V_1_sel = stream_out_24_data_V_1_sel_rd;

assign stream_out_24_data_V_1_state_cmp_full = ((stream_out_24_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_24_data_V_1_vld_out = stream_out_24_data_V_1_state[1'd0];

assign stream_out_24_last_V_1_ack_in = stream_out_24_last_V_1_state[1'd1];

assign stream_out_24_last_V_1_ack_out = stream_out_24_TREADY;

assign stream_out_24_last_V_1_load_A = (stream_out_24_last_V_1_state_cmp_full & ~stream_out_24_last_V_1_sel_wr);

assign stream_out_24_last_V_1_load_B = (stream_out_24_last_V_1_state_cmp_full & stream_out_24_last_V_1_sel_wr);

assign stream_out_24_last_V_1_sel = stream_out_24_last_V_1_sel_rd;

assign stream_out_24_last_V_1_state_cmp_full = ((stream_out_24_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_24_last_V_1_vld_out = stream_out_24_last_V_1_state[1'd0];

assign stream_out_24_user_V_1_ack_in = stream_out_24_user_V_1_state[1'd1];

assign stream_out_24_user_V_1_ack_out = stream_out_24_TREADY;

assign stream_out_24_user_V_1_load_A = (stream_out_24_user_V_1_state_cmp_full & ~stream_out_24_user_V_1_sel_wr);

assign stream_out_24_user_V_1_load_B = (stream_out_24_user_V_1_state_cmp_full & stream_out_24_user_V_1_sel_wr);

assign stream_out_24_user_V_1_sel = stream_out_24_user_V_1_sel_rd;

assign stream_out_24_user_V_1_state_cmp_full = ((stream_out_24_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_24_user_V_1_vld_out = stream_out_24_user_V_1_state[1'd0];

assign tmp4_fu_294_p2 = (stream_in_32_user_V_0_data_out | empty_4_reg_449_1);

assign tmp5_fu_307_p2 = (stream_in_32_last_V_0_data_out | empty_4_reg_449_2);

assign tmp_10_fu_237_p1 = stream_in_32_data_V_0_data_out[7:0];

assign tmp_11_fu_223_p1 = stream_in_32_data_V_0_data_out[15:0];

assign tmp_12_fu_199_p1 = stream_in_32_data_V_0_data_out[15:0];

assign tmp_2_fu_266_p1 = stream_in_32_data_V_0_data_out[23:0];

assign tmp_4_fu_270_p1 = stream_in_32_data_V_0_data_out[15:0];

assign tmp_6_fu_319_p1 = stream_in_32_data_V_0_data_out[7:0];

assign tmp_9_fu_261_p1 = stream_in_32_data_V_0_data_out[23:0];

endmodule //pixel_unpack
